#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ MCP-Mem0 —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Neo4j Browser, Supabase Dashboard, –∏ Memory Server
"""

import time
import json
from datetime import datetime

def test_memory_system_browser():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    """
    
    print("üåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–ê–ú–Ø–¢–ò –ß–ï–†–ï–ó –ë–†–ê–£–ó–ï–†")
    print("=" * 60)
    
    # URLs –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    urls_to_check = {
        "Memory Server Health": "http://localhost:8051/health",
        "Memory Server Docs": "http://localhost:8051/docs", 
        "Neo4j Browser": "http://localhost:7474",
        "Supabase Dashboard": "https://supabase.com/dashboard/project/your-project",
        "Grafana (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)": "http://localhost:3000",
        "Prometheus (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)": "http://localhost:9090"
    }
    
    print("\nüîó –°–°–´–õ–ö–ò –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:")
    print("-" * 30)
    for name, url in urls_to_check.items():
        print(f"üìä {name}: {url}")
    
    # Neo4j –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    neo4j_queries = [
        {
            "name": "–í—Å–µ —É–∑–ª—ã –∏ —Å–≤—è–∑–∏",
            "query": "MATCH (n)-[r]->(m) RETURN n, r, m LIMIT 25"
        },
        {
            "name": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
            "query": "CALL db.stats.retrieve('GRAPH COUNTS')"
        },
        {
            "name": "–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "query": "CALL db.schema.visualization()"
        },
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "query": "MATCH (n:Person) RETURN n LIMIT 10"
        },
        {
            "name": "–ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "query": "MATCH (n:Technology) RETURN n LIMIT 10"
        },
        {
            "name": "–í—Å–µ —Ç–∏–ø—ã —Å–≤—è–∑–µ–π",
            "query": "MATCH ()-[r]->() RETURN DISTINCT type(r) as relationship_type"
        }
    ]
    
    print(f"\nüï∏Ô∏è NEO4J –ó–ê–ü–†–û–°–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò (–≤—Å—Ç–∞–≤–∏—Ç—å –≤ Neo4j Browser):")
    print("-" * 60)
    for i, query_info in enumerate(neo4j_queries, 1):
        print(f"\n{i}. {query_info['name']}:")
        print(f"   {query_info['query']}")
    
    # Supabase SQL –∑–∞–ø—Ä–æ—Å—ã
    supabase_queries = [
        {
            "name": "–í—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            "query": "SELECT * FROM memories ORDER BY created_at DESC LIMIT 10;"
        },
        {
            "name": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            "query": "SELECT COUNT(*) as total_memories, COUNT(DISTINCT user_id) as unique_users FROM memories;"
        },
        {
            "name": "–ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É",
            "query": "SELECT id, content, created_at FROM memories WHERE content ILIKE '%Python%' LIMIT 5;"
        },
        {
            "name": "–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö",
            "query": "SELECT metadata->>'category' as category, COUNT(*) FROM memories GROUP BY metadata->>'category';"
        }
    ]
    
    print(f"\nüíæ SUPABASE SQL –ó–ê–ü–†–û–°–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:")
    print("-" * 50)
    for i, query_info in enumerate(supabase_queries, 1):
        print(f"\n{i}. {query_info['name']}:")
        print(f"   {query_info['query']}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_data = [
        {
            "type": "personal_info",
            "content": "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π, —è Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –ú–æ—Å–∫–≤—ã. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∏—Å—Ç–µ–º–∞—Ö –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.",
            "expected_neo4j": "Person(–ê–ª–µ–∫—Å–µ–π) -[WORKS_WITH]-> Technology(Python)",
            "expected_supabase": "Embedding –≤–µ–∫—Ç–æ—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ memories"
        },
        {
            "type": "tech_stack", 
            "content": "–ú–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–µ–∫: FastAPI + PostgreSQL + Redis + Docker. –î–ª—è ML –∏—Å–ø–æ–ª—å–∑—É—é PyTorch –∏ scikit-learn.",
            "expected_neo4j": "Technology —É–∑–ª—ã –∏ USED_WITH —Å–≤—è–∑–∏",
            "expected_supabase": "–í—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å tech-related queries"
        },
        {
            "type": "current_project",
            "content": "–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ MCP-Mem0 - —Å–∏—Å—Ç–µ–º–æ–π –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è AI –∞–≥–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Neo4j –∏ Supabase.",
            "expected_neo4j": "Project(MCP-Mem0) —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏",
            "expected_supabase": "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å —Å AI –∏ memory —Ç–æ–ø–∏–∫–∞–º–∏"
        }
    ]
    
    print(f"\nüß™ –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ü–†–û–í–ï–†–ö–ò:")
    print("-" * 40)
    for i, test in enumerate(test_data, 1):
        print(f"\n{i}. –¢–∏–ø: {test['type']}")
        print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç: {test['content']}")
        print(f"   Neo4j –æ–∂–∏–¥–∞–Ω–∏–µ: {test['expected_neo4j']}")
        print(f"   Supabase –æ–∂–∏–¥–∞–Ω–∏–µ: {test['expected_supabase']}")
    
    # –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    steps = [
        "1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: make memory-only (–∏–ª–∏ docker-compose up)",
        "2. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ: http://localhost:8051/health",
        "3. üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
        "4. üï∏Ô∏è –û—Ç–∫—Ä—ã—Ç—å Neo4j Browser: http://localhost:7474",
        "5. üîë –í–æ–π—Ç–∏ –≤ Neo4j (neo4j/graphmemory123)",
        "6. üìä –í—ã–ø–æ–ª–Ω–∏—Ç—å Neo4j –∑–∞–ø—Ä–æ—Å—ã –≤—ã—à–µ",
        "7. üíæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Supabase Dashboard",
        "8. üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã –≤ Supabase",
        "9. üîé –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
        "10. üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    ]
    
    print(f"\nüìã –ü–û–®–ê–ì–û–í–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
    print("-" * 30)
    for step in steps:
        print(f"   {step}")
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    expected_results = {
        "Neo4j Graph": [
            "–£–∑–ª—ã —Ç–∏–ø–∞ Person, Technology, Project",
            "–°–≤—è–∑–∏ —Ç–∏–ø–∞ WORKS_WITH, PREFERS, USES",
            "–ö–ª–∞—Å—Ç–µ—Ä—ã —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "–ü—É—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ–µ–∫—Ç–∞–º"
        ],
        "Supabase Vector": [
            "–¢–∞–±–ª–∏—Ü–∞ memories —Å embedding –≤–µ–∫—Ç–æ—Ä–∞–º–∏", 
            "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å project_id, category, tags",
            "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            "–í—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
        ],
        "Memory Server": [
            "API endpoints –æ—Ç–≤–µ—á–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±–µ –±–∞–∑—ã",
            "–ü–æ–∏—Å–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è"
        ]
    }
    
    print(f"\n‚úÖ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("-" * 30)
    for component, results in expected_results.items():
        print(f"\nüîß {component}:")
        for result in results:
            print(f"   ‚úì {result}")
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    potential_issues = [
        "‚ùå Neo4j –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
        "‚ùå Supabase connection timeout - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API –∫–ª—é—á–∏", 
        "‚ùå Memory Server 500 error - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏",
        "‚ùå –ü–æ–∏—Å–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é",
        "‚ùå –ì—Ä–∞—Ñ –ø—É—Å—Ç–æ–π - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π",
        "‚ùå –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —É–∑–ª—ã - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é"
    ]
    
    print(f"\n‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
    print("-" * 30)
    for issue in potential_issues:
        print(f"   {issue}")
    
    return {
        "timestamp": datetime.now().isoformat(),
        "test_type": "browser_testing",
        "urls": urls_to_check,
        "neo4j_queries": neo4j_queries,
        "supabase_queries": supabase_queries,
        "test_data": test_data,
        "expected_results": expected_results
    }

if __name__ == "__main__":
    results = test_memory_system_browser()
    
    print(f"\nüíæ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–•–†–ê–ù–ï–ù–´ –í: browser_test_results.json")
    with open("browser_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüéØ –ì–û–¢–û–í–û –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!")
    print("–°–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã.") 