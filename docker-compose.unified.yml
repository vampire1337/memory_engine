version: '3.8'

services:
  # Neo4j Graph Database для Graph Memory
  neo4j:
    image: neo4j:5.15-community
    container_name: unified-memory-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"  # Web UI
      - "7687:7687"  # Bolt protocol
    environment:
      NEO4J_AUTH: neo4j/graphmemory123
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4J_ACCEPT_LICENSE_AGREEMENT: yes
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - unified-memory-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL для векторного поиска (альтернатива Supabase)
  postgres:
    image: pgvector/pgvector:pg16
    container_name: unified-memory-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: unified_memory
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - unified-memory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d unified_memory"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Unified Memory Server
  memory-server:
    build: 
      context: .
      dockerfile: Dockerfile.unified
    container_name: unified-memory-server
    restart: unless-stopped
    ports:
      - "8051:8051"  # MCP Server
    environment:
      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      LLM_API_KEY: ${LLM_API_KEY:-}
      
      # Database Configuration (приоритет: Supabase, затем локальный)
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres123@postgres:5432/unified_memory}
      POSTGRES_URL: ${DATABASE_URL:-postgresql://postgres:postgres123@postgres:5432/unified_memory}
      
      # Neo4j Configuration
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: graphmemory123
      
      # Server Configuration
      MEMORY_SERVER_PORT: 8051
      LOG_LEVEL: info
      
      # Production Settings
      ENVIRONMENT: production
      HEALTH_CHECK_INTERVAL: 30
      
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - unified-memory-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8051/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: unified-memory-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - unified-memory-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: unified-memory-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - unified-memory-network
    profiles:
      - monitoring

  # Grafana для визуализации (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: unified-memory-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - unified-memory-network
    profiles:
      - monitoring

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  unified-memory-network:
    driver: bridge
    name: unified-memory-network

# Управление профилями для разных конфигураций
# Базовая конфигурация: docker-compose -f docker-compose.unified.yml up -d
# С мониторингом: docker-compose -f docker-compose.unified.yml --profile monitoring up -d
# Только граф память: docker-compose -f docker-compose.unified.yml up -d neo4j memory-server 