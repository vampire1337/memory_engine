#!/usr/bin/env python3
"""
üî• –ü–†–û–°–¢–û–ô –¢–ï–°–¢ TEMPORAL –í –ö–û–ù–¢–ï–ô–ù–ï–†–ï
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É start_workflow –∏–∑–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.append('/app')
sys.path.append('/app/src')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å debug wrapper
from debug_temporal import patch_temporal_client, TemporalDebugWrapper
patch_temporal_client()

from temporalio.client import Client
from temporalio import workflow

# Workflow classes –Ω–∞ module level
@workflow.defn
class SimpleTestWorkflow:
    @workflow.run
    async def run(self, test_arg: str) -> str:
        return f"Test success: {test_arg}"

@workflow.defn
class NoArgsWorkflow:
    @workflow.run
    async def run(self) -> str:
        return "No args test"

async def test_temporal_inside_container():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Temporal –∏–∑–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("üî• –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê TEMPORAL –ò–ó–ù–£–¢–†–ò –ö–û–ù–¢–ï–ô–ù–ï–†–ê")
    
    try:
        print("‚úÖ Debug wrapper –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Temporal...")
        client = await Client.connect("temporal-server:7233")
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {type(client)}")
        
        print("üöÄ –¢–ï–°–¢ 1: start_workflow —Å 1 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º")
        try:
            handle = await client.start_workflow(
                SimpleTestWorkflow.run,
                "test_argument",
                id="test-1",
                task_queue="test-queue"
            )
            print("‚úÖ –¢–ï–°–¢ 1 –ü–†–û–®–ï–õ!")
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ 1 –ü–†–û–í–ê–õ–ò–õ–°–Ø: {e}")
            
        print("üöÄ –¢–ï–°–¢ 2: start_workflow –ë–ï–ó –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        try:
            handle = await client.start_workflow(
                NoArgsWorkflow.run,
                id="test-2",
                task_queue="test-queue"
            )
            print("‚úÖ –¢–ï–°–¢ 2 –ü–†–û–®–ï–õ!")
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ 2 –ü–†–û–í–ê–õ–ò–õ–°–Ø: {e}")
            
        print("üöÄ –¢–ï–°–¢ 3: –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É (3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞)")
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç–æ—á–Ω—ã–π –≤—ã–∑–æ–≤ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–æ–¥–∞
        try:
            handle = await client.start_workflow(
                SimpleTestWorkflow.run,
                "session_id_test",  # session_id
                "user_id_test",     # user_id  
                "agent_id_test",    # agent_id
                id="test-3",
                task_queue="memory-task-queue"
            )
            print("‚úÖ –¢–ï–°–¢ 3 –ü–†–û–®–ï–õ!")
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ 3 –ü–†–û–í–ê–õ–ò–õ–°–Ø: {e}")
            print(f"–≠—Ç–æ –Ω–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞!")
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_temporal_inside_container()) 