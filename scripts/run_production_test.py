#!/usr/bin/env python3
"""
Production Test Runner –¥–ª—è MCP-Mem0
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä, —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã
"""

import subprocess
import time
import sys
import os
import asyncio
import requests
from pathlib import Path

def ensure_env_vars():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = {
        "OPENAI_API_KEY": "–í–∞—à OpenAI API –∫–ª—é—á",
        "NEO4J_PASSWORD": "graphmemory123",
        "MEMORY_SERVER_PORT": "8051"
    }
    
    missing_vars = []
    for var, description in required_vars.items():
        if not os.getenv(var):
            missing_vars.append(f"{var}: {description}")
    
    if missing_vars:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            print(f"   {var}")
        return False
    
    return True

def start_unified_server():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å unified memory server"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Unified Memory Server...")
    
    # –ü—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
    server_script = Path(__file__).parent.parent / "src" / "unified_memory_server.py"
    
    if not server_script.exists():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω server script: {server_script}")
        return None
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    try:
        process = subprocess.Popen(
            [sys.executable, str(server_script)],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        for attempt in range(30):  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            try:
                response = requests.get("http://localhost:8051/health", timeout=2)
                if response.status_code == 200:
                    print("‚úÖ Server –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    return process
            except:
                pass
            
            time.sleep(1)
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞... ({attempt + 1}/30)")
        
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥")
        process.terminate()
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

async def run_comprehensive_test():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–∞–º
    test_script = Path(__file__).parent.parent / "tests" / "test_all_tools_comprehensive.py"
    
    if not test_script.exists():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω test script: {test_script}")
        return False
    
    try:
        result = subprocess.run(
            [sys.executable, str(test_script)],
            capture_output=True,
            text=True,
            timeout=300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        )
        
        print(result.stdout)
        if result.stderr:
            print("Errors:", result.stderr)
        
        return result.returncode == 0
        
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def save_memory_with_mem0():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ Mem0"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º composio –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
        from mcp_Supabase_Server_COMPOSIO_RETRIEVE_ACTIONS import retrieve_actions
        
        # –ù–∞–π–¥–µ–º Mem0 actions
        mem0_actions = retrieve_actions(
            app_name="mem0",
            usecase="save test results and project status",
            limit=10
        )
        
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è production —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ MCP-Mem0 Production Test Runner")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º environment
    if not ensure_env_vars():
        print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    print("‚úÖ Environment variables configured")
    
    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server_process = start_unified_server()
    if not server_process:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
        return
    
    try:
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º comprehensive —Ç–µ—Å—Ç—ã
        test_success = await run_comprehensive_test()
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–º—è—Ç—å
        memory_saved = save_memory_with_mem0()
        
        # 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 50)
        print("üéâ PRODUCTION TEST COMPLETE")
        print("=" * 50)
        print(f"‚úÖ Server: Running")
        print(f"{'‚úÖ' if test_success else '‚ùå'} Tests: {'Passed' if test_success else 'Failed'}")
        print(f"{'‚úÖ' if memory_saved else '‚ö†Ô∏è'} Memory: {'Saved' if memory_saved else 'Not saved'}")
        
        if test_success:
            print("\nüöÄ MCP-Mem0 –≥–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç—ã")
        
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if server_process:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            server_process.terminate()
            server_process.wait()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 