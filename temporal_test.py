#!/usr/bin/env python3
"""
üî• –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ TEMPORAL START_WORKFLOW
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã Temporal Client.start_workflow()
"""

import asyncio
from temporalio import activity, workflow
from temporalio.client import Client


# –ü—Ä–æ—Å—Ç–æ–π workflow –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@workflow.defn
class TestWorkflow:
    @workflow.run
    async def run(self, user_id: str, agent_id: str = None) -> str:
        return f"SUCCESS: {user_id}, {agent_id}"


async def test_temporal_start_workflow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞ start_workflow"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Temporal Client.start_workflow()...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Temporal
        client = await Client.connect("localhost:7233")
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Temporal —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–ø–æ—Å–æ–± –≤—ã–∑–æ–≤–∞ start_workflow
        print("\nüî• –¢–µ—Å—Ç 1: –ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ò–ù–¢–ê–ö–°–ò–°")
        workflow_handle = await client.start_workflow(
            TestWorkflow.run,  # workflow method (–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç 1)
            "test_user",       # –∞—Ä–≥—É–º–µ–Ω—Ç—ã workflow (–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç 2+)  
            "test_agent",      # –µ—â–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç workflow
            id="test-workflow-correct",  # workflow ID (keyword argument)
            task_queue="test-queue"      # task queue (keyword argument)
        )
        result = await workflow_handle.result()
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–ø–æ—Å–æ–± - –ø–µ—Ä–µ–¥–∞—á–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–∫ keyword args workflow
        print("\n‚ùå –¢–µ—Å—Ç 2: –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ò–ù–¢–ê–ö–°–ò–° (–∫–∞–∫ –≤ –Ω–∞—à–µ–º –∫–æ–¥–µ)")
        try:
            workflow_handle = await client.start_workflow(
                TestWorkflow.run,         # workflow method
                user_id="test_user",      # ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û - —ç—Ç–æ keyword workflow arg!
                agent_id="test_agent",    # ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û - —ç—Ç–æ keyword workflow arg!
                id="test-workflow-wrong", # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π keyword arg –¥–ª—è start_workflow
                task_queue="test-queue"   # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π keyword arg –¥–ª—è start_workflow
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–∞—è): {e}")
            
        print("\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(test_temporal_start_workflow()) 