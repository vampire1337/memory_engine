#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö enhanced –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import sys
import os
import asyncio
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from utils import (
    get_mem0_client,
    simulate_enhanced_search,
    estimate_content_confidence,
    extract_project_from_content,
    categorize_content,
    get_memory_metadata,
    safe_get_memories
)

async def test_enhanced_tools():
    """–¢–µ—Å—Ç enhanced –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENHANCED TOOLS")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        print("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mem0 –∫–ª–∏–µ–Ω—Ç–∞...")
        mem0_client = get_mem0_client()
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_memories = [
            "–ü—Ä–æ–µ–∫—Ç mcp-mem0: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ FastMCP —Å–µ—Ä–≤–µ—Ä–µ —Å enhanced –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏",
            "–ü—Ä–æ–µ–∫—Ç mcp-mem0: –ü—Ä–æ–±–ª–µ–º–∞ —Å NoneType –æ—à–∏–±–∫–∞–º–∏ –≤ enhanced –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞",
            "–ü—Ä–æ–µ–∫—Ç mcp-mem0: –†–µ—à–µ–Ω–∏–µ - –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –±–∞–∑–æ–≤–æ–º—É API Mem0 —á–µ—Ä–µ–∑ content analysis",
            "–ü—Ä–æ–µ–∫—Ç mcp-mem0: –°—Ç–∞—Ç—É—Å - –±–∞–≥—Ñ–∏–∫—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç",
            "–ü—Ä–æ–µ–∫—Ç –¥—Ä—É–≥–æ–π: –≠—Ç–æ –ø–∞–º—è—Ç—å –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏",
            "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ production",
            "–í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        ]
        
        for memory in test_memories:
            result = mem0_client.add(memory, user_id="default")
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {memory[:50]}...")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        all_memories = mem0_client.get_all(user_id="default")
        memory_list = safe_get_memories(all_memories)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(memory_list)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        # –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
        if memory_list:
            for i, memory in enumerate(memory_list[:3]):
                metadata = get_memory_metadata(memory)
                print(f"   –ü–∞–º—è—Ç—å {i+1}:")
                print(f"     –ö–æ–Ω—Ç–µ–Ω—Ç: {metadata['content'][:50]}...")
                print(f"     Confidence: {metadata['confidence_level']}")
                print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {metadata['category']}")
                print(f"     –ü—Ä–æ–µ–∫—Ç: {extract_project_from_content(metadata['content'])}")
        
        # –¢–µ—Å—Ç 5: –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏...")
        test_contents = [
            "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –Ω–µ —Ä–µ—à–µ–Ω–∞",
            "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞",
            "–í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –±–∞–≥ –≤ —Å–∏—Å—Ç–µ–º–µ",
            "–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ MCP —Å –≥–∞—Ä–∞–Ω—Ç–∏—è–º–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏"
        ]
        
        for content in test_contents:
            confidence = estimate_content_confidence(content)
            category = categorize_content(content)
            print(f"   '{content[:40]}...' -> Confidence: {confidence}, Category: {category}")
        
        # –¢–µ—Å—Ç 6: –°–∏–º—É–ª—è—Ü–∏—è enhanced –ø–æ–∏—Å–∫–∞
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç enhanced –ø–æ–∏—Å–∫–∞...")
        search_results = simulate_enhanced_search(
            mem0_client, 
            query="mcp-mem0 –ø—Ä–æ–µ–∫—Ç", 
            project_id="mcp-mem0", 
            min_confidence=5, 
            limit=3
        )
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        for i, result in enumerate(search_results):
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}:")
            print(f"     –ö–æ–Ω—Ç–µ–Ω—Ç: {result['content'][:50]}...")
            print(f"     Confidence: {result['confidence_level']}")
            print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}")
        
        # –¢–µ—Å—Ç 7: –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ confidence
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å –≤—ã—Å–æ–∫–∏–º confidence...")
        high_confidence_results = simulate_enhanced_search(
            mem0_client, 
            query="–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", 
            min_confidence=7, 
            limit=5
        )
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(high_confidence_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º confidence")
        for i, result in enumerate(high_confidence_results):
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}:")
            print(f"     –ö–æ–Ω—Ç–µ–Ω—Ç: {result['content'][:50]}...")
            print(f"     Confidence: {result['confidence_level']}")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"üìä –ò—Ç–æ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(memory_list)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_enhanced_tools())
    sys.exit(0 if success else 1) 