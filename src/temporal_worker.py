"""
üîß TEMPORAL WORKER - –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨ MEMORY ACTIVITIES 
===================================================

Dedicated Worker –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö Temporal Activities
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: memory operations, graph operations, health checks
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ PYTHONPATH
sys.path.append(str(Path(__file__).parent))

from temporalio.client import Client
from temporalio.worker import Worker

# –ò–º–ø–æ—Ä—Ç Activities –∏ Workflows
from temporal_memory_service import (
    execute_memory_save,
    execute_memory_search, 
    execute_graph_operation,
    health_check_activity,
    MemorySessionWorkflow,
    MemoryHealthWorkflow
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def main():
    """–ó–∞–ø—É—Å–∫ Temporal Worker"""
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ Temporal Server –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    temporal_address = os.getenv("TEMPORAL_SERVER_ADDRESS", "localhost:7233")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Temporal Server —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    max_retries = 10
    retry_delay = 2
    
    for attempt in range(max_retries):
        try:
            client = await Client.connect(temporal_address)
            logger.info(f"üîó Connected to Temporal Server at {temporal_address}")
            break
        except Exception as e:
            logger.error(f"‚ùå Failed to connect to Temporal (attempt {attempt + 1}/{max_retries}): {e}")
            if attempt < max_retries - 1:
                logger.info(f"‚è∞ Retrying in {retry_delay} seconds...")
                await asyncio.sleep(retry_delay)
                retry_delay = min(retry_delay * 1.5, 30)  # Exponential backoff
            else:
                logger.error("üö´ Max retries reached. Exiting.")
                return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Worker
    worker = Worker(
        client,
        task_queue="memory-task-queue",
        workflows=[
            MemorySessionWorkflow,
            MemoryHealthWorkflow
        ],
        activities=[
            execute_memory_save,
            execute_memory_search,
            execute_graph_operation,
            health_check_activity
        ]
    )
    
    logger.info("üöÄ Starting Temporal Worker...")
    logger.info("üìã Registered Workflows: MemorySessionWorkflow, MemoryHealthWorkflow")
    logger.info("‚ö° Registered Activities: memory_save, memory_search, graph_operation, health_check")
    logger.info("üéØ Task Queue: memory-task-queue")
    
    try:
        await worker.run()
    except KeyboardInterrupt:
        logger.info("üõë Worker stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Worker error: {e}")
    finally:
        await client.close()
        logger.info("üîö Worker shutdown complete")


if __name__ == "__main__":
    asyncio.run(main()) 