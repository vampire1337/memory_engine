"""
üöÄ Redis Service –¥–ª—è MCP-Mem0
==========================

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- Event-driven —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É Memgraph –∏ Supabase
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
- Distributed locking –¥–ª—è ACID –æ–ø–µ—Ä–∞—Ü–∏–π
- Message queue –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
- Session management
"""

import asyncio
import json
import logging
import time
from contextlib import asynccontextmanager
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Union
from uuid import uuid4

import redis
import redis.asyncio as aioredis
from redis.exceptions import RedisError, ConnectionError as RedisConnectionError
from redis.asyncio import Redis
from redis.asyncio.lock import Lock
from tenacity import retry, stop_after_attempt, wait_exponential

logger = logging.getLogger(__name__)


class RedisEventTypes:
    """–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    
    # Memgraph —Å–æ–±—ã—Ç–∏—è
    ENTITY_CREATED = "entity_created"
    ENTITY_UPDATED = "entity_updated"
    ENTITY_DELETED = "entity_deleted"
    RELATIONSHIP_CREATED = "relationship_created"
    RELATIONSHIP_UPDATED = "relationship_updated"
    RELATIONSHIP_DELETED = "relationship_deleted"
    
    # Supabase —Å–æ–±—ã—Ç–∏—è
    VECTOR_UPDATED = "vector_updated"
    SEARCH_PERFORMED = "search_performed"
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    SYSTEM_STATUS = "system_status"
    CACHE_INVALIDATED = "cache_invalidated"


class RedisService:
    """
    üöÄ –û—Å–Ω–æ–≤–Ω–æ–π Redis —Å–µ—Ä–≤–∏—Å –¥–ª—è MCP-Mem0
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - Event-driven —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ  
    - Distributed locking
    - Message queues
    - Session management
    """
    
    def __init__(
        self,
        redis_url: str = "redis://localhost:6379/0",
        password: Optional[str] = None,
        max_connections: int = 100,
        decode_responses: bool = True,
        default_ttl: int = 300,  # 5 –º–∏–Ω—É—Ç
        session_ttl: int = 3600,  # 1 —á–∞—Å
        lock_timeout: int = 30,   # 30 —Å–µ–∫—É–Ω–¥
    ):
        self.redis_url = redis_url
        self.password = password
        self.max_connections = max_connections
        self.decode_responses = decode_responses
        self.default_ttl = default_ttl
        self.session_ttl = session_ttl
        self.lock_timeout = lock_timeout
        
        self.redis: Optional[Redis] = None
        self.pubsub: Optional[Any] = None
        self._connected = False
        self._subscribers: Dict[str, List[callable]] = {}
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.cache_hits = 0
        self.cache_misses = 0
        self.events_published = 0
        self.events_received = 0
    
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=4, max=10)
    )
    async def connect(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —Å retry –ª–æ–≥–∏–∫–æ–π"""
        try:
            self.redis = redis.from_url(
                self.redis_url,
                password=self.password,
                max_connections=self.max_connections,
                decode_responses=self.decode_responses,
                socket_keepalive=True,
                socket_keepalive_options={},
                retry_on_timeout=True,
                health_check_interval=30
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await self.redis.ping()
            self._connected = True
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pub/sub
            self.pubsub = self.redis.pubsub()
            
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except (RedisConnectionError, RedisError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Redis: {e}")
            raise
    
    async def disconnect(self) -> None:
        """Graceful –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis"""
        try:
            if self.pubsub:
                await self.pubsub.close()
            
            if self.redis:
                await self.redis.close()
            
            self._connected = False
            logger.info("‚úÖ Redis –æ—Ç–∫–ª—é—á–µ–Ω gracefully")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Redis: {e}")
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return self._connected and self.redis is not None
    
    # =====================================
    # üöÄ EVENT-DRIVEN –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
    # =====================================
    
    async def publish_event(
        self,
        event_type: str,
        data: Dict[str, Any],
        channel: str = "mem0_events",
        timestamp: Optional[datetime] = None
    ) -> bool:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (—Å–º. RedisEventTypes)
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            channel: –ö–∞–Ω–∞–ª –¥–ª—è pub/sub
            timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        """
        if not self.is_connected():
            logger.warning("‚ö†Ô∏è Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π")
            return False
        
        try:
            event = {
                "event_type": event_type,
                "data": data,
                "timestamp": (timestamp or datetime.utcnow()).isoformat(),
                "event_id": str(uuid4()),
                "source": "mcp_mem0"
            }
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
            subscribers = await self.redis.publish(
                channel, 
                json.dumps(event, ensure_ascii=False)
            )
            
            self.events_published += 1
            logger.debug(f"üì§ –°–æ–±—ã—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {event_type} -> {subscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_type}: {e}")
            return False
    
    async def subscribe_to_events(
        self,
        callback: callable,
        channels: List[str] = None,
        event_types: List[str] = None
    ) -> None:
        """
        –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        
        Args:
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
            channels: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
            event_types: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
        """
        if not self.is_connected():
            logger.warning("‚ö†Ô∏è Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
            return
        
        if channels is None:
            channels = ["mem0_events"]
        
        try:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã
            await self.pubsub.subscribe(*channels)
            
            logger.info(f"üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã: {channels}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
            async for message in self.pubsub.listen():
                if message["type"] == "message":
                    try:
                        event = json.loads(message["data"])
                        
                        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
                        if event_types and event.get("event_type") not in event_types:
                            continue
                        
                        # –í—ã–∑–æ–≤ callback
                        await callback(event)
                        self.events_received += 1
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    # =====================================
    # üíæ INTELLIGENT CACHING
    # =====================================
    
    async def cache_set(
        self,
        key: str,
        value: Any,
        ttl: Optional[int] = None,
        namespace: str = "cache"
    ) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à —Å TTL
        
        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            ttl: Time to live –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            namespace: –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è –∫–ª—é—á–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if not self.is_connected():
            return False
        
        try:
            full_key = f"{namespace}:{key}"
            ttl = ttl or self.default_ttl
            
            # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
            if isinstance(value, (dict, list)):
                value = json.dumps(value, ensure_ascii=False)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å TTL
            result = await self.redis.setex(full_key, ttl, value)
            
            logger.debug(f"üíæ –ö—ç—à —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_key} (TTL: {ttl}s)")
            return bool(result)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—ç—à–∞ {key}: {e}")
            return False
    
    async def cache_get(
        self,
        key: str,
        namespace: str = "cache",
        deserialize_json: bool = True
    ) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞
        
        Args:
            key: –ö–ª—é—á –∫—ç—à–∞
            namespace: –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω
            deserialize_json: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON
            
        Returns:
            Any: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ None
        """
        if not self.is_connected():
            return None
        
        try:
            full_key = f"{namespace}:{key}"
            value = await self.redis.get(full_key)
            
            if value is None:
                self.cache_misses += 1
                logger.debug(f"üí® –ö—ç—à –ø—Ä–æ–º–∞—Ö: {full_key}")
                return None
            
            self.cache_hits += 1
            logger.debug(f"üéØ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ: {full_key}")
            
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if deserialize_json and isinstance(value, str):
                try:
                    return json.loads(value)
                except (json.JSONDecodeError, TypeError):
                    pass
            
            return value
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞ {key}: {e}")
            return None
    
    async def cache_delete(
        self,
        key: str,
        namespace: str = "cache"
    ) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ –∫—ç—à–∞"""
        if not self.is_connected():
            return False
        
        try:
            full_key = f"{namespace}:{key}"
            result = await self.redis.delete(full_key)
            
            logger.debug(f"üóëÔ∏è –ö—ç—à —É–¥–∞–ª–µ–Ω: {full_key}")
            return bool(result)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—ç—à–∞ {key}: {e}")
            return False
    
    async def cache_clear_namespace(self, namespace: str) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ namespace –≤ –∫—ç—à–µ"""
        if not self.is_connected():
            return 0
        
        try:
            pattern = f"{namespace}:*"
            keys = await self.redis.keys(pattern)
            
            if keys:
                deleted = await self.redis.delete(*keys)
                logger.info(f"üßπ –û—á–∏—â–µ–Ω namespace {namespace}: {deleted} –∫–ª—é—á–µ–π")
                return deleted
            
            return 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ namespace {namespace}: {e}")
            return 0
    
    # =====================================
    # üîí DISTRIBUTED LOCKING
    # =====================================
    
    @asynccontextmanager
    async def distributed_lock(
        self,
        resource: str,
        timeout: Optional[int] = None,
        blocking_timeout: Optional[int] = None
    ):
        """
        Distributed lock –¥–ª—è ACID –æ–ø–µ—Ä–∞—Ü–∏–π
        
        Args:
            resource: –ò–º—è —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            timeout: –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            blocking_timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        if not self.is_connected():
            raise RuntimeError("Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è locking")
        
        timeout = timeout or self.lock_timeout
        lock_key = f"lock:{resource}"
        
        lock = Lock(
            self.redis,
            lock_key,
            timeout=timeout,
            blocking_timeout=blocking_timeout
        )
        
        try:
            logger.debug(f"üîí –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {resource}")
            
            # –ó–∞—Ö–≤–∞—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            acquired = await lock.acquire()
            
            if not acquired:
                raise RedisError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É: {resource}")
            
            logger.debug(f"‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞: {resource}")
            yield lock
            
        finally:
            try:
                await lock.release()
                logger.debug(f"üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞: {resource}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {resource}: {e}")
    
    # =====================================
    # üì® MESSAGE QUEUE
    # =====================================
    
    async def enqueue_task(
        self,
        queue_name: str,
        task_data: Dict[str, Any],
        priority: int = 0
    ) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        
        Args:
            queue_name: –ò–º—è –æ—á–µ—Ä–µ–¥–∏
            task_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–±–æ–ª—å—à–µ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        if not self.is_connected():
            return False
        
        try:
            task = {
                "id": str(uuid4()),
                "data": task_data,
                "created_at": datetime.utcnow().isoformat(),
                "priority": priority
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ sorted set –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            await self.redis.zadd(
                f"queue:{queue_name}",
                {json.dumps(task, ensure_ascii=False): priority}
            )
            
            logger.debug(f"üì® –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å {queue_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å {queue_name}: {e}")
            return False
    
    async def dequeue_task(self, queue_name: str) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
        
        Args:
            queue_name: –ò–º—è –æ—á–µ—Ä–µ–¥–∏
            
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ None
        """
        if not self.is_connected():
            return None
        
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            result = await self.redis.zpopmax(f"queue:{queue_name}")
            
            if not result:
                return None
            
            task_json, priority = result[0]
            task = json.loads(task_json)
            
            logger.debug(f"üì• –ó–∞–¥–∞—á–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ {queue_name}")
            return task
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ {queue_name}: {e}")
            return None
    
    # =====================================
    # üîß SESSION MANAGEMENT
    # =====================================
    
    async def create_session(
        self,
        session_id: str,
        data: Dict[str, Any],
        ttl: Optional[int] = None
    ) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
        ttl = ttl or self.session_ttl
        return await self.cache_set(
            session_id,
            data,
            ttl=ttl,
            namespace="sessions"
        )
    
    async def get_session(self, session_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏"""
        return await self.cache_get(session_id, namespace="sessions")
    
    async def update_session(
        self,
        session_id: str,
        data: Dict[str, Any],
        extend_ttl: bool = True
    ) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏"""
        if extend_ttl:
            # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ TTL –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            await self.redis.expire(f"sessions:{session_id}", self.session_ttl)
        
        return await self.cache_set(
            session_id,
            data,
            ttl=self.session_ttl,
            namespace="sessions"
        )
    
    async def delete_session(self, session_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        return await self.cache_delete(session_id, namespace="sessions")
    
    # =====================================
    # üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –ú–ï–¢–†–ò–ö–ò
    # =====================================
    
    async def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Redis —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.is_connected():
            return {"status": "disconnected"}
        
        try:
            info = await self.redis.info()
            
            return {
                "status": "connected",
                "redis_version": info.get("redis_version"),
                "connected_clients": info.get("connected_clients"),
                "used_memory": info.get("used_memory_human"),
                "keyspace_hits": info.get("keyspace_hits", 0),
                "keyspace_misses": info.get("keyspace_misses", 0),
                "cache_hit_ratio": self.cache_hits / max(self.cache_hits + self.cache_misses, 1),
                "events_published": self.events_published,
                "events_received": self.events_received,
                "uptime_seconds": info.get("uptime_in_seconds")
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Redis: {e}")
            return {"status": "error", "error": str(e)}
    
    async def health_check(self) -> Dict[str, Any]:
        """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
            pong = await self.redis.ping()
            ping_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
            test_key = f"health_check:{int(time.time())}"
            await self.redis.setex(test_key, 10, "test")
            test_value = await self.redis.get(test_key)
            await self.redis.delete(test_key)
            
            return {
                "status": "healthy",
                "ping": pong,
                "response_time_ms": round(ping_time * 1000, 2),
                "read_write_test": test_value == "test",
                "timestamp": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            return {
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat()
            }


# =====================================
# üöÄ SINGLETON INSTANCE
# =====================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis —Å–µ—Ä–≤–∏—Å–∞
redis_service: Optional[RedisService] = None


async def get_redis_service() -> RedisService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Redis —Å–µ—Ä–≤–∏—Å–∞"""
    global redis_service
    
    if redis_service is None:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Redis —Å–µ—Ä–≤–∏—Å–∞
        redis_service = RedisService()
        await redis_service.connect()
    
    return redis_service


async def init_redis_service(
    redis_url: str = "redis://localhost:6379/0",
    password: Optional[str] = None,
    **kwargs
) -> RedisService:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å–µ—Ä–≤–∏—Å–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    global redis_service
    
    redis_service = RedisService(
        redis_url=redis_url,
        password=password,
        **kwargs
    )
    
    await redis_service.connect()
    return redis_service


async def close_redis_service() -> None:
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Redis —Å–µ—Ä–≤–∏—Å–∞"""
    global redis_service
    
    if redis_service:
        await redis_service.disconnect()
        redis_service = None 