"""
üèóÔ∏è NEXT LEVEL MCP-MEM0 SERVER —Å TEMPORAL.IO
==============================================

–£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
- 17 Enterprise Memory Tools —á–µ—Ä–µ–∑ MCP Protocol
- Temporal.io: Workflows + Activities + Signals + Queries
- Vector Store: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ (Supabase/Qdrant)
- Graph Store: –°–≤—è–∑–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (Memgraph)
- FastAPI: RESTful API + MCP integration

–ó–ê–ú–ï–ù–ê Redis ‚Üí Temporal –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Å—Ç–æ—Ç—ã
"""

import logging
import asyncio
import os
import json
from typing import Optional, List, Dict, Any
from contextlib import asynccontextmanager
from datetime import datetime

from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi_mcp import FastApiMCP
from pydantic import BaseModel, Field

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("mcp-mem0-temporal")

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
try:
    from .memory_client import EnterpriseMemoryClient
    from .temporal_memory_service import TemporalMemoryService, get_temporal_service, close_temporal_service
    logger.info("‚úÖ Temporal Memory Service –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç)")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    # Fallback –¥–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    try:
        from src.memory_client import EnterpriseMemoryClient
        from src.temporal_memory_service import TemporalMemoryService, get_temporal_service, close_temporal_service
        logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç (Temporal –≤–∫–ª—é—á–µ–Ω)")
    except ImportError as e2:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: {e2}")
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
        import sys
        sys.path.append('/app/src')
        from memory_client import EnterpriseMemoryClient
        from temporal_memory_service import TemporalMemoryService, get_temporal_service, close_temporal_service
        logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω sys.path –∏–º–ø–æ—Ä—Ç (Temporal –≤–∫–ª—é—á–µ–Ω)")


# =================== PYDANTIC MODELS ===================

class MemoryRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
    content: str = Field(..., description="–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    user_id: str = Field(default="user", description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    agent_id: Optional[str] = Field(None, description="ID –∞–≥–µ–Ω—Ç–∞")
    session_id: Optional[str] = Field(None, description="ID —Å–µ—Å—Å–∏–∏")
    metadata: Optional[Dict[str, Any]] = Field(None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")


class SearchRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏"""
    query: str = Field(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    user_id: str = Field(default="user", description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    agent_id: Optional[str] = Field(None, description="ID –∞–≥–µ–Ω—Ç–∞")
    session_id: Optional[str] = Field(None, description="ID —Å–µ—Å—Å–∏–∏")
    limit: int = Field(default=5, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")


class EntityRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Å—É—â–Ω–æ—Å—Ç–∏"""
    entity_name: str = Field(..., description="–ò–º—è —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    user_id: str = Field(default="user", description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


class GetMemoriesRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id: str = Field(default="user", description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    agent_id: Optional[str] = Field(None, description="ID –∞–≥–µ–Ω—Ç–∞")
    session_id: Optional[str] = Field(None, description="ID —Å–µ—Å—Å–∏–∏")


class VerifiedMemoryRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    content: str = Field(..., description="–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    confidence: float = Field(default=0.9, description="–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
    source: str = Field(default="verified", description="–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    user_id: str = Field(default="user", description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    metadata: Optional[Dict[str, Any]] = Field(None, description="–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")


class ProjectMilestoneRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ milestone –ø—Ä–æ–µ–∫—Ç–∞"""
    milestone_name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ milestone")
    description: str = Field(..., description="–û–ø–∏—Å–∞–Ω–∏–µ milestone")
    project_id: str = Field(..., description="ID –ø—Ä–æ–µ–∫—Ç–∞")
    user_id: str = Field(default="user", description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    metadata: Optional[Dict[str, Any]] = Field(None, description="–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")


# =================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===================

memory_client: Optional[EnterpriseMemoryClient] = None
temporal_service: Optional[TemporalMemoryService] = None


# =================== LIFECYCLE MANAGEMENT ===================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Temporal"""
    global memory_client, temporal_service
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ NEXT LEVEL MCP-Mem0 Server —Å Temporal.io...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Temporal Service (–ó–ê–ú–ï–ù–ê Redis)
        temporal_service = await get_temporal_service()
        logger.info("‚úÖ Temporal Memory Service –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Memory Client
        memory_client = EnterpriseMemoryClient()
        await memory_client.initialize()
        logger.info("‚úÖ Memory Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("üéØ NEXT LEVEL –ü–ê–ú–Ø–¢–¨ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê:")
        logger.info(f"   üèõÔ∏è Temporal Workflows: –ê–ö–¢–ò–í–ù–û")
        logger.info(f"   üìä Graph Support: {memory_client.graph_support}")
        logger.info(f"   üîç Vector Support: {memory_client.vector_support}")
        logger.info("   üöÄ –í—Å–µ 17 Enterprise Tools –≥–æ—Ç–æ–≤—ã!")
            
        yield
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        yield
    finally:
        # Cleanup
        if memory_client:
            await memory_client.close()
        if temporal_service:
            await close_temporal_service()
        logger.info("üîí NEXT LEVEL Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# =================== FASTAPI APPLICATION ===================

app = FastAPI(
    title="üèõÔ∏è NEXT LEVEL MCP-Mem0 Server —Å Temporal.io",
    description="17 Production-ready Memory Tools for AI Agents + Temporal Workflows",
    version="3.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# MCP –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ü–û–°–õ–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö endpoints


# =================== DEPENDENCY INJECTION ===================

async def get_memory_client() -> EnterpriseMemoryClient:
    if not memory_client:
        raise HTTPException(status_code=503, detail="Memory client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    return memory_client


async def get_temporal() -> TemporalMemoryService:
    if not temporal_service:
        raise HTTPException(status_code=503, detail="Temporal service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    return temporal_service


# =================== –û–°–ù–û–í–ù–´–ï MEMORY TOOLS —Å TEMPORAL ===================

@app.post("/memory/save", 
          operation_id="save_memory",
          summary="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞–º—è—Ç—å", 
          description="–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Graph –∏ Vector –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ Temporal Workflows")
async def save_memory(
    request: MemoryRequest,
    temporal: TemporalMemoryService = Depends(get_temporal)
) -> Dict[str, Any]:
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        session_id = request.session_id or f"auto-session-{request.user_id}"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Temporal Workflow
        operation_id = await temporal.execute_memory_operation(
            session_id=session_id,
            operation_type="save",
            user_id=request.user_id,
            content=request.content,
            agent_id=request.agent_id,
            metadata=request.metadata
        )
        
        logger.info(f"‚úÖ Memory save operation sent via Temporal: {operation_id}")
        
        return {
            "success": True,
            "operation_id": operation_id,
            "session_id": session_id,
            "message": "Memory save operation submitted to Temporal workflow",
            "temporal_enabled": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ Temporal: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {str(e)}")


@app.post("/memory/search",
          operation_id="search_memories", 
          summary="–ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π",
          description="Hybrid –ø–æ–∏—Å–∫ –ø–æ Graph –∏ Vector –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ Temporal Activities")
async def search_memories(
    request: SearchRequest,
    temporal: TemporalMemoryService = Depends(get_temporal)
) -> Dict[str, Any]:
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        session_id = request.session_id or f"auto-session-{request.user_id}"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Temporal Workflow
        operation_id = await temporal.execute_memory_operation(
            session_id=session_id,
            operation_type="search",
            user_id=request.user_id,
            query=request.query,
            agent_id=request.agent_id,
            metadata={"limit": request.limit}
        )
        
        logger.info(f"‚úÖ Memory search operation sent via Temporal: {operation_id}")
        
        return {
            "success": True,
            "operation_id": operation_id,
            "session_id": session_id,
            "query": request.query,
            "message": "Memory search operation submitted to Temporal workflow",
            "temporal_enabled": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ Temporal: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞–º—è—Ç–∏: {str(e)}")


@app.post("/memory/get-all",
          operation_id="get_all_memories",
          summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è",
          description="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def get_all_memories(
    request: GetMemoriesRequest,
    client: EnterpriseMemoryClient = Depends(get_memory_client)
) -> Dict[str, Any]:
    try:
        result = await client.list_memory(
            user_id=request.user_id,
            agent_id=request.agent_id,
            session_id=request.session_id
        )
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {request.user_id}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {str(e)}")


@app.post("/memory/save-verified",
          operation_id="save_verified_memory",
          summary="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å",
          description="–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —É—Ä–æ–≤–Ω–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
async def save_verified_memory(
    request: VerifiedMemoryRequest,
    temporal: TemporalMemoryService = Depends(get_temporal)
) -> Dict[str, Any]:
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
        metadata = {
            **(request.metadata or {}),
            "confidence": request.confidence,
            "source": request.source,
            "verified": True,
            "verification_timestamp": datetime.now().isoformat()
        }
        
        session_id = f"verified-session-{request.user_id}"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Temporal Workflow
        operation_id = await temporal.execute_memory_operation(
            session_id=session_id,
            operation_type="save",
            user_id=request.user_id,
            content=request.content,
            metadata=metadata
        )
        
        logger.info(f"‚úÖ Verified memory save operation sent via Temporal: {operation_id}")
        
        return {
            "success": True,
            "operation_id": operation_id,
            "confidence": request.confidence,
            "source": request.source,
            "message": "Verified memory save operation submitted to Temporal workflow",
            "temporal_enabled": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏: {str(e)}")


@app.post("/memory/get-context",
          operation_id="get_accurate_context",
          summary="–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
          description="–ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
async def get_accurate_context(
    request: SearchRequest,
    temporal: TemporalMemoryService = Depends(get_temporal)
) -> Dict[str, Any]:
    try:
        session_id = request.session_id or f"context-session-{request.user_id}"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Temporal Workflow —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        operation_id = await temporal.execute_memory_operation(
            session_id=session_id,
            operation_type="search",
            user_id=request.user_id,
            query=request.query,
            agent_id=request.agent_id,
            metadata={
                "limit": request.limit,
                "context_focused": True,
                "accuracy_priority": True
            }
        )
        
        logger.info(f"‚úÖ Accurate context operation sent via Temporal: {operation_id}")
        
        return {
            "success": True,
            "operation_id": operation_id,
            "session_id": session_id,
            "query": request.query,
            "context_type": "accurate",
            "message": "Accurate context operation submitted to Temporal workflow",
            "temporal_enabled": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {str(e)}")


# =================== GRAPH MEMORY TOOLS —Å TEMPORAL ===================

@app.post("/graph/save-memory",
          operation_id="save_graph_memory",
          summary="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–æ–≤—É—é –ø–∞–º—è—Ç—å",
          description="–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞–º—è—Ç—å —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ —Å–≤—è–∑–µ–π")
async def save_graph_memory(
    request: MemoryRequest,
    temporal: TemporalMemoryService = Depends(get_temporal)
) -> Dict[str, Any]:
    try:
        session_id = request.session_id or f"graph-session-{request.user_id}"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Temporal Workflow –¥–ª—è –≥—Ä–∞—Ñ–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        operation_id = await temporal.execute_memory_operation(
            session_id=session_id,
            operation_type="save_graph",
            user_id=request.user_id,
            content=request.content,
            agent_id=request.agent_id,
            metadata={
                **(request.metadata or {}),
                "graph_focused": True,
                "extract_entities": True,
                "extract_relationships": True
            }
        )
        
        logger.info(f"‚úÖ Graph memory save operation sent via Temporal: {operation_id}")
        
        return {
            "success": True,
            "operation_id": operation_id,
            "session_id": session_id,
            "operation_type": "graph_save",
            "message": "Graph memory save operation submitted to Temporal workflow",
            "temporal_enabled": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–æ–≤–æ–π –ø–∞–º—è—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–æ–≤–æ–π –ø–∞–º—è—Ç–∏: {str(e)}")


@app.post("/graph/search",
          operation_id="search_graph_memory",
          summary="–ü–æ–∏—Å–∫ –ø–æ –≥—Ä–∞—Ñ–æ–≤–æ–π –ø–∞–º—è—Ç–∏",
          description="–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥—Ä–∞—Ñ–æ–≤—ã—Ö —Å–≤—è–∑–µ–π")
async def search_graph_memory(
    request: SearchRequest,
    temporal: TemporalMemoryService = Depends(get_temporal)
) -> Dict[str, Any]:
    try:
        session_id = request.session_id or f"graph-search-session-{request.user_id}"
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Temporal Workflow –¥–ª—è –≥—Ä–∞—Ñ–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        operation_id = await temporal.execute_memory_operation(
            session_id=session_id,
            operation_type="search_graph",
            user_id=request.user_id,
            query=request.query,
            agent_id=request.agent_id,
            metadata={
                "limit": request.limit,
                "graph_focused": True,
                "relationship_aware": True
            }
        )
        
        logger.info(f"‚úÖ Graph memory search operation sent via Temporal: {operation_id}")
        
        return {
            "success": True,
            "operation_id": operation_id,
            "session_id": session_id,
            "query": request.query,
            "operation_type": "graph_search",
            "message": "Graph memory search operation submitted to Temporal workflow",
            "temporal_enabled": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≥—Ä–∞—Ñ–æ–≤–æ–π –ø–∞–º—è—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≥—Ä–∞—Ñ–æ–≤–æ–π –ø–∞–º—è—Ç–∏: {str(e)}")


# =================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENTERPRISE MEMORY TOOLS ===================

@app.post("/memory/update",
          operation_id="update_memory",
          summary="–û–±–Ω–æ–≤–∏—Ç—å –ø–∞–º—è—Ç—å",
          description="–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–º—è—Ç—å –ø–æ ID")
async def update_memory(
    memory_id: str,
    content: str,
    user_id: str = "user",
    metadata: Optional[Dict[str, Any]] = None,
    client: EnterpriseMemoryClient = Depends(get_memory_client)
) -> Dict[str, Any]:
    try:
        result = await client.update_memory(
            memory_id=memory_id,
            content=content,
            user_id=user_id,
            metadata=metadata
        )
        
        logger.info(f"‚úÖ –ü–∞–º—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {memory_id}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {str(e)}")


@app.delete("/memory/delete/{memory_id}",
           operation_id="delete_memory",
           summary="–£–¥–∞–ª–∏—Ç—å –ø–∞–º—è—Ç—å",
           description="–£–¥–∞–ª—è–µ—Ç –ø–∞–º—è—Ç—å –ø–æ ID")
async def delete_memory(
    memory_id: str,
    user_id: str = "user",
    client: EnterpriseMemoryClient = Depends(get_memory_client)
) -> Dict[str, Any]:
    try:
        result = await client.delete_memory(memory_id=memory_id, user_id=user_id)
        
        logger.info(f"‚úÖ –ü–∞–º—è—Ç—å —É–¥–∞–ª–µ–Ω–∞: {memory_id}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {str(e)}")


@app.get("/memory/history/{memory_id}",
         operation_id="get_memory_history",
         summary="–ò—Å—Ç–æ—Ä–∏—è –ø–∞–º—è—Ç–∏",
         description="–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞–º—è—Ç–∏")
async def get_memory_history(
    memory_id: str,
    client: EnterpriseMemoryClient = Depends(get_memory_client)
) -> Dict[str, Any]:
    try:
        result = await client.get_memory_history(memory_id)
        
        logger.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∞: {memory_id}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞–º—è—Ç–∏: {str(e)}")


@app.get("/memory/stats",
         operation_id="get_memory_stats",
         summary="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏",
         description="–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
async def get_memory_stats(
    user_id: str = "user",
    client: EnterpriseMemoryClient = Depends(get_memory_client)
) -> Dict[str, Any]:
    try:
        result = await client.get_stats()
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è {user_id}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@app.post("/memory/bulk-save",
          operation_id="bulk_save_memories",
          summary="–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏",
          description="–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
async def bulk_save_memories(
    memories: List[str],
    user_id: str = "user",
    agent_id: Optional[str] = None,
    session_id: Optional[str] = None,
    metadata: Optional[Dict[str, Any]] = None,
    temporal: TemporalMemoryService = Depends(get_temporal)
) -> Dict[str, Any]:
    try:
        session_id = session_id or f"bulk-session-{user_id}"
        
        # –ú–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Temporal
        operations = []
        for content in memories:
            operation_id = await temporal.execute_memory_operation(
                session_id=session_id,
                operation_type="save",
                user_id=user_id,
                content=content,
                agent_id=agent_id,
                metadata=metadata
            )
            operations.append(operation_id)
        
        logger.info(f"‚úÖ Bulk save operations sent via Temporal: {len(operations)} items")
        
        return {
            "success": True,
            "operations": operations,
            "session_id": session_id,
            "count": len(memories),
            "message": f"Bulk save operations submitted to Temporal workflow",
            "temporal_enabled": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@app.post("/analytics/entity-analysis",
          operation_id="analyze_entity",
          summary="–ê–Ω–∞–ª–∏–∑ —Å—É—â–Ω–æ—Å—Ç–∏",
          description="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –∏ –µ—ë —Å–≤—è–∑–∏ –≤ –≥—Ä–∞—Ñ–µ –ø–∞–º—è—Ç–∏")
async def analyze_entity(
    request: EntityRequest,
    temporal: TemporalMemoryService = Depends(get_temporal)
) -> Dict[str, Any]:
    try:
        session_id = f"entity-analysis-{request.user_id}"
        
        # –ê–Ω–∞–ª–∏–∑ —Å—É—â–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Temporal
        operation_id = await temporal.execute_memory_operation(
            session_id=session_id,
            operation_type="analyze_entity",
            user_id=request.user_id,
            content=request.entity_name,
            metadata={
                "analysis_type": "entity",
                "entity_name": request.entity_name
            }
        )
        
        logger.info(f"‚úÖ Entity analysis operation sent via Temporal: {operation_id}")
        
        return {
            "success": True,
            "operation_id": operation_id,
            "session_id": session_id,
            "entity_name": request.entity_name,
            "operation_type": "entity_analysis",
            "message": "Entity analysis operation submitted to Temporal workflow",
            "temporal_enabled": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–Ω–æ—Å—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–Ω–æ—Å—Ç–∏: {str(e)}")


# =================== TEMPORAL STATUS & MONITORING ===================

@app.get("/temporal/session/{session_id}",
         operation_id="get_temporal_session_state",
         summary="–°—Ç–∞—Ç—É—Å Temporal —Å–µ—Å—Å–∏–∏",
         description="–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Temporal workflow —Å–µ—Å—Å–∏–∏")
async def get_temporal_session_state(
    session_id: str,
    temporal: TemporalMemoryService = Depends(get_temporal)
) -> Dict[str, Any]:
    try:
        session_state = await temporal.get_session_state(session_id)
        
        if not session_state:
            raise HTTPException(status_code=404, detail=f"Session {session_id} not found")
        
        return {
            "success": True,
            "session_state": session_state,
            "temporal_enabled": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")


@app.get("/temporal/health",
         operation_id="get_temporal_health",
         summary="–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è Temporal",
         description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Temporal workflows –∏ activities")
async def get_temporal_health(
    temporal: TemporalMemoryService = Depends(get_temporal)
) -> Dict[str, Any]:
    try:
        health_status = await temporal.get_health_status()
        
        return {
            "success": True,
            "temporal_health": health_status,
            "temporal_enabled": True,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è Temporal: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è: {str(e)}")


# =================== –°–ò–°–¢–ï–ú–ù–´–ï ENDPOINTS ===================

@app.get("/health")
async def health() -> Dict[str, Any]:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    try:
        health_data = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "components": {
                "fastapi": "healthy",
                "temporal": "checking...",
                "memory_client": "checking...",
                "graph_store": "unknown",
                "vector_store": "unknown"
            },
            "architecture": "NEXT_LEVEL",
            "version": "3.0.0"
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Memory Client
        try:
            if memory_client:
                client_health = await memory_client.health_check()
                health_data["components"]["memory_client"] = "healthy"
                health_data["components"]["graph_store"] = "healthy" if memory_client.graph_support else "unavailable"
                health_data["components"]["vector_store"] = "healthy" if memory_client.vector_support else "unavailable"
            else:
                health_data["components"]["memory_client"] = "unavailable"
        except Exception as e:
            health_data["components"]["memory_client"] = f"unhealthy: {str(e)}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Temporal
        try:
            if temporal_service:
                temporal_health = await temporal_service.get_health_status()
                health_data["components"]["temporal"] = "healthy" if temporal_health.get("status") != "error" else "unhealthy"
                health_data["temporal_details"] = temporal_health
            else:
                health_data["components"]["temporal"] = "unavailable"
        except Exception as e:
            health_data["components"]["temporal"] = f"unhealthy: {str(e)}"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if any("unhealthy" in str(status) or "unavailable" in str(status) 
               for status in health_data["components"].values()):
            health_data["status"] = "degraded"
        
        return health_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "architecture": "NEXT_LEVEL",
            "version": "3.0.0"
        }


@app.get("/")
async def root() -> Dict[str, Any]:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    return {
        "title": "üèõÔ∏è NEXT LEVEL MCP-Mem0 Server —Å Temporal.io",
        "description": "–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è AI –∞–≥–µ–Ω—Ç–æ–≤",
        "version": "3.0.0",
        "architecture": {
            "workflow_engine": "Temporal.io",
            "vector_store": "Supabase/Qdrant",
            "graph_store": "Memgraph",
            "api_protocol": "MCP + REST",
            "reliability": "NEXT_LEVEL"
        },
        "features": [
            "17 Enterprise Memory Tools",
            "Temporal Workflows –¥–ª—è coordination",
            "Temporal Activities –¥–ª—è operations", 
            "Temporal Signals –¥–ª—è real-time communication",
            "Vector + Graph unified memory",
            "MCP Protocol support",
            "Production-ready reliability"
        ],
        "endpoints": {
            "health": "/health",
            "docs": "/docs",
            "mcp": "/mcp",
            "temporal_health": "/temporal/health"
        },
        "timestamp": datetime.now().isoformat()
    }


# =================== MCP INTEGRATION ===================

# –°–æ–∑–¥–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ –ü–û–°–õ–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö endpoints
from fastapi_mcp import FastApiMCP

mcp = FastApiMCP(app)

# –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
mcp.mount()

logger.info("‚úÖ FastAPI-MCP –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω: /mcp endpoint –∞–∫—Ç–∏–≤–µ–Ω")
logger.info("üéØ –í—Å–µ 17 Enterprise Memory Tools —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ MCP Protocol")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "fastapi_temporal_server:app",
        host="0.0.0.0",
        port=8051,
        reload=True,
        log_level="info"
    )