"""
üèõÔ∏è TEMPORAL MEMORY SERVICE - NEXT LEVEL –ü–ê–ú–Ø–¢–¨ –î–õ–Ø –ê–ì–ï–ù–¢–û–í
================================================================

–£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
- Vector Store: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ (Supabase/Qdrant)
- Graph Store: –°–≤—è–∑–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (Memgraph)  
- Temporal Workflows: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∏ state management
- Activities: –í—Å–µ memory operations
- Signals/Queries: Real-time communication
- Durable Timers: TTL –∏ scheduling

–ó–ê–ú–ï–ù–ê Redis –Ω–∞ Temporal –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from uuid import uuid4

# üî• –•–ò–¢–†–´–ô DEBUGGING IMPORT - –í–°–¢–ê–í–õ–Ø–ï–ú –í –ù–ê–ß–ê–õ–û!
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
try:
    from debug_temporal import patch_temporal_client
    # –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ü–ê–¢–ß–ò–ú TEMPORAL!
    patch_temporal_client()
    print("üî• TEMPORAL CLIENT –£–°–ü–ï–®–ù–û –ó–ê–ü–ê–¢–ß–ï–ù –î–õ–Ø DEBUGGING!")
except ImportError as e:
    print(f"‚ö†Ô∏è Debug wrapper –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

from temporalio import workflow, activity
from temporalio.client import Client
from temporalio.worker import Worker

logger = logging.getLogger(__name__)


# =================== TEMPORAL DATA MODELS ===================

@dataclass 
class MemoryOperation:
    """–û–ø–µ—Ä–∞—Ü–∏—è —Å –ø–∞–º—è—Ç—å—é"""
    operation_id: str
    operation_type: str  # save, search, update, delete
    user_id: str
    agent_id: Optional[str] = None
    session_id: Optional[str] = None
    content: Optional[str] = None
    query: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    timestamp: Optional[datetime] = None


@dataclass
class MemoryResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é"""
    operation_id: str
    success: bool
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    timestamp: Optional[datetime] = None


@dataclass  
class MemorySessionState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–∞–º—è—Ç–∏"""
    session_id: str
    user_id: str
    agent_id: Optional[str]
    operations_count: int = 0
    last_operation: Optional[datetime] = None
    metadata: Optional[Dict[str, Any]] = None


# =================== TEMPORAL ACTIVITIES ===================

@activity.defn
async def execute_memory_save(operation: MemoryOperation) -> MemoryResult:
    """Activity –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    try:
        # –ò–º–ø–æ—Ä—Ç memory client —Å fallback
        try:
            from .memory_client import get_global_memory_client
        except ImportError:
            from src.memory_client import get_global_memory_client
        
        client = await get_global_memory_client()
        
        result = await client.add_memory(
            content=operation.content,
            user_id=operation.user_id,
            agent_id=operation.agent_id,
            session_id=operation.session_id,
            metadata=operation.metadata
        )
        
        logger.info(f"‚úÖ Memory saved: {operation.operation_id}")
        
        return MemoryResult(
            operation_id=operation.operation_id,
            success=True,
            result=result,
            timestamp=datetime.now()
        )
        
    except Exception as e:
        logger.error(f"‚ùå Memory save failed: {e}")
        return MemoryResult(
            operation_id=operation.operation_id,
            success=False,
            error=str(e),
            timestamp=datetime.now()
        )


@activity.defn
async def execute_memory_search(operation: MemoryOperation) -> MemoryResult:
    """Activity –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏"""
    try:
        try:
            from .memory_client import get_global_memory_client
        except ImportError:
            from src.memory_client import get_global_memory_client
        
        client = await get_global_memory_client()
        
        result = await client.search_memory(
            query=operation.query,
            user_id=operation.user_id,
            agent_id=operation.agent_id,
            session_id=operation.session_id,
            limit=operation.metadata.get("limit", 5) if operation.metadata else 5
        )
        
        logger.info(f"‚úÖ Memory searched: {operation.operation_id}")
        
        return MemoryResult(
            operation_id=operation.operation_id,
            success=True,
            result=result,
            timestamp=datetime.now()
        )
        
    except Exception as e:
        logger.error(f"‚ùå Memory search failed: {e}")
        return MemoryResult(
            operation_id=operation.operation_id,
            success=False,
            error=str(e),
            timestamp=datetime.now()
        )


@activity.defn
async def execute_graph_operation(operation: MemoryOperation) -> MemoryResult:
    """Activity –¥–ª—è –≥—Ä–∞—Ñ–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    try:
        try:
            from .memory_client import get_global_memory_client
        except ImportError:
            from src.memory_client import get_global_memory_client
        
        client = await get_global_memory_client()
        
        if operation.operation_type == "save_graph":
            result = await client.add_memory(
                content=operation.content,
                user_id=operation.user_id,
                agent_id=operation.agent_id,
                session_id=operation.session_id,
                metadata={**(operation.metadata or {}), "graph_focused": True}
            )
        elif operation.operation_type == "search_graph":
            result = await client.search_memory(
                query=operation.query,
                user_id=operation.user_id,
                agent_id=operation.agent_id,
                session_id=operation.session_id
            )
        else:
            raise ValueError(f"Unknown graph operation: {operation.operation_type}")
        
        logger.info(f"‚úÖ Graph operation completed: {operation.operation_id}")
        
        return MemoryResult(
            operation_id=operation.operation_id,
            success=True,
            result=result,
            timestamp=datetime.now()
        )
        
    except Exception as e:
        logger.error(f"‚ùå Graph operation failed: {e}")
        return MemoryResult(
            operation_id=operation.operation_id,
            success=False,
            error=str(e),
            timestamp=datetime.now()
        )


@activity.defn
async def health_check_activity() -> Dict[str, Any]:
    """Activity –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        try:
            from .memory_client import get_global_memory_client
        except ImportError:
            from src.memory_client import get_global_memory_client
        
        client = await get_global_memory_client()
        health_result = await client.health_check()
        
        return {
            "temporal_status": "healthy",
            "memory_system": health_result,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}")
        return {
            "temporal_status": "unhealthy", 
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }


# =================== TEMPORAL WORKFLOWS ===================

@workflow.defn
class MemorySessionWorkflow:
    """
    –ì–ª–∞–≤–Ω—ã–π workflow –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞
    
    –ó–∞–º–µ–Ω—è–µ—Ç Redis session management –∏ event handling
    """
    
    def __init__(self):
        self.session_state: Optional[MemorySessionState] = None
        self.operations_history: List[MemoryResult] = []
        self.is_session_active = True
    
    @workflow.run
    async def run(self, session_data: str) -> str:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –ø–∞–º—è—Ç–∏"""
        
        # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ JSON
        import json
        data = json.loads(session_data)
        session_id = data["session_id"]
        user_id = data["user_id"] 
        agent_id = data.get("agent_id")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        self.session_state = MemorySessionState(
            session_id=session_id,
            user_id=user_id,
            agent_id=agent_id,
            operations_count=0,
            last_operation=workflow.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º workflow.now() –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞
        )
        
        logger.info(f"üß† Memory session started: {session_id}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        while self.is_session_active:
            try:
                # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º (–∑–∞–º–µ–Ω—è–µ—Ç Redis TTL)
                await workflow.wait_condition(
                    lambda: not self.is_session_active,
                    timeout=timedelta(hours=1)  # Session TTL
                )
            except Exception:
                # –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º
                logger.info(f"‚è∞ Session timeout: {session_id}")
                self.is_session_active = False
        
        logger.info(f"üîí Memory session ended: {session_id}")
        return f"Session {session_id} completed with {self.session_state.operations_count} operations"
    
    @workflow.signal
    async def memory_operation_signal(self, operation: MemoryOperation):
        """–°–∏–≥–Ω–∞–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é"""
        try:
            # –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ–≥–æ activity –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            if operation.operation_type == "save":
                result = await workflow.execute_activity(
                    execute_memory_save,
                    operation,
                    start_to_close_timeout=timedelta(minutes=5)
                )
            elif operation.operation_type == "search":
                result = await workflow.execute_activity(
                    execute_memory_search,
                    operation,
                    start_to_close_timeout=timedelta(minutes=5)
                )
            elif operation.operation_type in ["save_graph", "search_graph"]:
                result = await workflow.execute_activity(
                    execute_graph_operation,
                    operation,
                    start_to_close_timeout=timedelta(minutes=5)
                )
            else:
                result = MemoryResult(
                    operation_id=operation.operation_id,
                    success=False,
                    error=f"Unknown operation type: {operation.operation_type}",
                    timestamp=workflow.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º workflow.now()
                )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
            if self.session_state:
                self.session_state.operations_count += 1
                self.session_state.last_operation = workflow.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º workflow.now()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.operations_history.append(result)
            
            logger.info(f"‚úÖ Operation completed: {operation.operation_type}")
            
        except Exception as e:
            logger.error(f"‚ùå Operation failed: {e}")
            
            error_result = MemoryResult(
                operation_id=operation.operation_id,
                success=False,
                error=str(e),
                timestamp=workflow.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º workflow.now()
            )
            self.operations_history.append(error_result)
    
    @workflow.signal  
    async def close_session_signal(self):
        """–°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏"""
        self.is_session_active = False
        logger.info(f"üì§ Session close signal received")
    
    @workflow.query
    def get_session_state(self) -> Optional[MemorySessionState]:
        """Query –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        return self.session_state
    
    @workflow.query
    def get_operations_history(self) -> List[MemoryResult]:
        """Query –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return self.operations_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π


@workflow.defn
class MemoryHealthWorkflow:
    """
    Workflow –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
    
    –ó–∞–º–µ–Ω—è–µ—Ç Redis health checks –∏ metrics
    """
    
    def __init__(self):
        self.health_status = "initializing"
        self.last_check: Optional[datetime] = None
        self.health_history: List[Dict[str, Any]] = []
    
    @workflow.run
    async def run(self) -> str:
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è"""
        
        self.health_status = "running"
        logger.info("üíä Health monitoring workflow started")
        
        while True:
            try:
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ health check –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                health_result = await workflow.execute_activity(
                    health_check_activity,
                    start_to_close_timeout=timedelta(minutes=2)
                )
                
                self.last_check = workflow.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º workflow.now()
                self.health_history.append(health_result)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if len(self.health_history) > 20:
                    self.health_history = self.health_history[-20:]
                
                # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏)
                await workflow.sleep(120)  # 2 –º–∏–Ω—É—Ç—ã
                
            except Exception as e:
                logger.error(f"‚ùå Health check failed: {e}")
                self.health_status = "unhealthy"
                await workflow.sleep(10)  # Retry —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    
    @workflow.query
    def get_health_status(self) -> Dict[str, Any]:
        """Query –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        return {
            "status": self.health_status,
            "last_check": self.last_check.isoformat() if self.last_check else None,
            "checks_count": len(self.health_history)
        }
    
    @workflow.query
    def get_health_history(self) -> List[Dict[str, Any]]:
        """Query –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
        return self.health_history


# =================== TEMPORAL SERVICE CLASS ===================

class TemporalMemoryService:
    """
    üèõÔ∏è Temporal Memory Service - NEXT LEVEL –ø–∞–º—è—Ç—å –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
    
    –ó–∞–º–µ–Ω—è–µ—Ç Redis –Ω–∞ Temporal –¥–ª—è:
    - Session management ‚Üí Workflows
    - Event handling ‚Üí Signals  
    - Caching ‚Üí Workflow state
    - Queues ‚Üí Activities
    - Locks ‚Üí Workflow coordination
    """
    
    def __init__(self, temporal_server: str = "temporal-server:7233"):
        self.temporal_server = temporal_server
        self.client: Optional[Client] = None
        self.worker: Optional[Worker] = None
        self.active_sessions: Dict[str, str] = {}  # session_id -> workflow_id
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ Temporal —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Temporal —Å–µ—Ä–≤–µ—Ä—É
            self.client = await Client.connect(self.temporal_server)
            logger.info(f"‚úÖ Connected to Temporal server: {self.temporal_server}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ Worker'–∞
            self.worker = Worker(
                self.client,
                task_queue="memory-task-queue",
                workflows=[MemorySessionWorkflow, MemoryHealthWorkflow],
                activities=[
                    execute_memory_save,
                    execute_memory_search, 
                    execute_graph_operation,
                    health_check_activity
                ]
            )
            
            # –ó–∞–ø—É—Å–∫ health monitoring workflow (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ)
            try:
                await self.client.start_workflow(
                    MemoryHealthWorkflow.run,
                    id="memory-health-monitor",
                    task_queue="memory-task-queue"
                )
                logger.info("üíä Health monitoring workflow started")
            except Exception as e:
                if "already started" in str(e).lower():
                    logger.info("üíä Health monitoring workflow already running")
                else:
                    logger.warning(f"‚ö†Ô∏è Health monitoring workflow issue: {e}")
            
            logger.info("üèõÔ∏è Temporal Memory Service started")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start Temporal service: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Temporal —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            if self.worker:
                self.worker.shutdown()
            logger.info("üîí Temporal Memory Service stopped")
        except Exception as e:
            logger.error(f"‚ùå Error stopping Temporal service: {e}")
    
    async def create_memory_session(
        self, 
        user_id: str, 
        agent_id: Optional[str] = None
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ø–∞–º—è—Ç–∏"""
        session_id = f"session-{user_id}-{uuid4().hex[:8]}"
        workflow_id = f"memory-session-{session_id}"
        
        if not self.client:
            raise RuntimeError("Temporal client not initialized")
        
        # –ó–∞–ø—É—Å–∫ workflow –¥–ª—è —Å–µ—Å—Å–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–´–ó–û–í!
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É (–æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç)
        import json
        session_data = json.dumps({
            "session_id": session_id,
            "user_id": user_id,
            "agent_id": agent_id
        })
        
        await self.client.start_workflow(
            MemorySessionWorkflow.run,
            session_data,  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç workflow
            id=workflow_id,
            task_queue="memory-task-queue"
        )
        
        self.active_sessions[session_id] = workflow_id
        logger.info(f"üß† Memory session created: {session_id}")
        
        return session_id
    
    async def execute_memory_operation(
        self,
        session_id: str,
        operation_type: str,
        user_id: str,
        content: Optional[str] = None,
        query: Optional[str] = None,
        agent_id: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None
    ) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é —á–µ—Ä–µ–∑ Temporal"""
        
        if session_id not in self.active_sessions:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –Ω–µ—Ç
            session_id = await self.create_memory_session(user_id, agent_id)
        
        workflow_id = self.active_sessions[session_id]
        operation_id = f"op-{uuid4().hex[:8]}"
        
        operation = MemoryOperation(
            operation_id=operation_id,
            operation_type=operation_type,
            user_id=user_id,
            agent_id=agent_id,
            session_id=session_id,
            content=content,
            query=query,
            metadata=metadata
            # timestamp —É–±—Ä–∞–Ω - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Activity
        )
        
        if not self.client:
            raise RuntimeError("Temporal client not initialized")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ workflow
        workflow_handle = self.client.get_workflow_handle(workflow_id)
        await workflow_handle.signal(
            MemorySessionWorkflow.memory_operation_signal,
            operation
        )
        
        logger.info(f"üì§ Memory operation sent: {operation_type}")
        return operation_id
    
    async def get_session_state(self, session_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        if session_id not in self.active_sessions:
            return None
        
        workflow_id = self.active_sessions[session_id]
        
        if not self.client:
            return None
        
        workflow_handle = self.client.get_workflow_handle(workflow_id)
        state = await workflow_handle.query(MemorySessionWorkflow.get_session_state)
        
        return {
            "session_id": state.session_id,
            "user_id": state.user_id,
            "agent_id": state.agent_id,
            "operations_count": state.operations_count,
            "last_operation": state.last_operation.isoformat() if state.last_operation else None
        } if state else None
    
    async def get_health_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ query –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏)"""
        if not self.client:
            return {"status": "temporal_not_connected"}
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å –±–µ–∑ workflow query –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è buffer overflow
            return {
                "status": "healthy", 
                "temporal_connected": True,
                "active_sessions": len(self.active_sessions),
                "message": "Temporal Memory Service running (query throttled)"
            }
        except Exception as e:
            logger.error(f"‚ùå Failed to get health status: {e}")
            return {"status": "error", "error": str(e)}


# =================== GLOBAL INSTANCE ===================

_temporal_service: Optional[TemporalMemoryService] = None

async def get_temporal_service() -> TemporalMemoryService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Temporal —Å–µ—Ä–≤–∏—Å–∞"""
    global _temporal_service
    
    if _temporal_service is None:
        # –ß—Ç–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ Temporal Server –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import os
        temporal_server = os.getenv("TEMPORAL_SERVER_ADDRESS", "temporal-server:7233")
        
        _temporal_service = TemporalMemoryService(temporal_server)
        await _temporal_service.start()
    
    return _temporal_service

async def close_temporal_service():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
    global _temporal_service
    
    if _temporal_service:
        await _temporal_service.stop()
        _temporal_service = None