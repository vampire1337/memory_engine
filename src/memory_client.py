"""
üß† ENTERPRISE MEMORY CLIENT v2.0
–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mem0 Graph + Vector –ø–∞–º—è—Ç—å—é + Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –í–°–ï–• 17 ENTERPRISE TOOLS:
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ø–æ—Ä—Ç 5432)
- Mem0 v1.1 Graph + Vector –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
- Redis events & caching
- Production error handling
"""

import logging
import os
import json
import asyncio
from typing import Optional, List, Dict, Any, Union
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# Mem0 imports
try:
    from mem0 import Memory
    MEM0_AVAILABLE = True
    logger.info("‚úÖ Mem0 SDK –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    MEM0_AVAILABLE = False
    Memory = None
    logger.error(f"‚ùå Mem0 SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# Redis –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ Temporal
REDIS_AVAILABLE = False


class EnterpriseMemoryClient:
    """
    Enterprise Memory Client –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 17 tools
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - Graph Memory (Memgraph) + Vector Memory (Supabase) –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    - Redis —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ 
    - Comprehensive error handling
    - Production-ready metrics
    """
    
    def __init__(self):
        self.memory: Optional[Memory] = None
        
        # –§–ª–∞–≥–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.graph_support = False
        self.vector_support = False
        self.redis_support = False  # –ó–∞–º–µ–Ω–µ–Ω –Ω–∞ Temporal
        
        # Metrics
        self.operations_count = 0
        self.errors_count = 0
        self.cache_hits = 0
        self.cache_misses = 0
        
        logger.info("üß† EnterpriseMemoryClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def initialize(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enterprise Memory Client...")
            
            if not MEM0_AVAILABLE:
                raise RuntimeError("Mem0 SDK –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            config = self._get_memory_config()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mem0 
            logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ Mem0 Memory —Å full config...")
            logger.info(f"üîß Config: {config}")
            
            try:
                self.memory = Memory.from_config(config_dict=config)
                logger.info("‚úÖ Mem0 Memory —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as supabase_error:
                if "Wrong password" in str(supabase_error) or "connection" in str(supabase_error).lower():
                    logger.warning(f"‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({supabase_error}), –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Qdrant")
                    
                    # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å Qdrant
                    fallback_config = config.copy()
                    fallback_config["vector_store"] = {
                        "provider": "qdrant",
                        "config": {
                            "host": "qdrant",
                            "port": 6333
                        }
                    }
                    
                    logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å Qdrant...")
                    self.memory = Memory.from_config(config_dict=fallback_config)
                    logger.info("‚úÖ Mem0 Memory —Å–æ–∑–¥–∞–Ω —Å Qdrant fallback")
                else:
                    raise supabase_error
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self._check_component_support()
            
            logger.info(f"‚úÖ Memory Client –≥–æ—Ç–æ–≤:")
            logger.info(f"   üï∏Ô∏è Graph Support: {self.graph_support}")
            logger.info(f"   üîç Vector Support: {self.vector_support}")
            logger.info(f"   üîÑ Redis Support: {self.redis_support}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Memory Client: {e}")
            self.memory = None
            raise
    
    def _get_memory_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Mem0 –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ—Ä—Ç 5432 –≤–º–µ—Å—Ç–æ 6543
        database_url = os.getenv("DATABASE_URL")
        if database_url and ":6543" in database_url:
            database_url = database_url.replace(":6543", ":5432")
            logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—Ç DATABASE_URL: 6543 ‚Üí 5432 (Session pooler)")
        
        # Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if not database_url or "Wrong password" in str(database_url):
            logger.warning("‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é Qdrant")
            vector_config = {
                "provider": "qdrant",
                "config": {
                    "host": "qdrant",
                    "port": 6333
                }
            }
        else:
            vector_config = {
                "provider": "supabase",
                "config": {
                    "connection_string": database_url or os.getenv("POSTGRES_URL")
                }
            }
        
        config = {
            "version": "v1.1",  # –í–ê–ñ–ù–û: –≤–µ—Ä—Å–∏—è –¥–ª—è Graph Memory
            
            # Graph Store (Memgraph —á–µ—Ä–µ–∑ neo4j –¥—Ä–∞–π–≤–µ—Ä)
            "graph_store": {
                "provider": "neo4j", 
                "config": {
                    "url": os.getenv("NEO4J_URL", "bolt://memgraph:7687"),
                    "username": os.getenv("NEO4J_USERNAME", "memgraph"),
                    "password": os.getenv("NEO4J_PASSWORD", "memgraph")
                    # –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º database –ø–∞—Ä–∞–º–µ—Ç—Ä - Memgraph –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ë–î
                }
            },
            
            # Vector Store (—Å fallback)
            "vector_store": vector_config,
            
            # LLM Configuration
            "llm": {
                "provider": "openai",
                "config": {
                    "model": os.getenv("LLM_CHOICE") or os.getenv("MEM0_DEFAULT_LLM_MODEL", "gpt-4o-mini"),
                    "api_key": os.getenv("OPENAI_API_KEY")
                }
            },
            
            # Embedder Configuration
            "embedder": {
                "provider": "openai",
                "config": {
                    "model": os.getenv("EMBEDDING_MODEL_CHOICE") or os.getenv("MEM0_DEFAULT_EMBEDDING_MODEL", "text-embedding-3-small"),
                    "api_key": os.getenv("OPENAI_API_KEY")
                }
            }
        }
        
        logger.info("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Mem0:")
        logger.info(f"   üï∏Ô∏è Graph Store: {config['graph_store']['provider']}")
        logger.info(f"   üîç Vector Store: {config['vector_store']['provider']}")
        logger.info(f"   ü§ñ LLM: {config['llm']['config']['model']}")
        
        return config
    
    async def _check_component_support(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Memory —Å–æ–∑–¥–∞–Ω
            if self.memory is None:
                return
            
            # Mem0 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å store'–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ - support = True
            self.graph_support = True  # –ë—É–¥–µ—Ç False –µ—Å–ª–∏ Memgraph –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            self.vector_support = True  # –ë—É–¥–µ—Ç False –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            self.graph_support = False
            self.vector_support = False
    
    async def add_memory(
        self,
        content: str,
        user_id: str = "user",
        agent_id: Optional[str] = None,
        session_id: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ Graph + Vector store –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        
        Args:
            content: –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            agent_id: ID –∞–≥–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            session_id: ID —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if not self.memory:
                raise RuntimeError("Memory client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            full_metadata = metadata or {}
            if agent_id:
                full_metadata["agent_id"] = agent_id
            if session_id:
                full_metadata["session_id"] = session_id
            
            full_metadata.update({
                "timestamp": datetime.now().isoformat(),
                "client_version": "2.0.0"
            })
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ Mem0 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ graph + vector)
            result = await asyncio.to_thread(
                self.memory.add,
                content,
                user_id=user_id,
                metadata=full_metadata
            )
            
            self.operations_count += 1
            
            logger.info(f"‚úÖ –ü–∞–º—è—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {result.get('id')} –¥–ª—è {user_id}")
            
            return {
                "id": result.get("id"),
                "message": result.get("message", "Memory added successfully"),
                "user_id": user_id,
                "content": content,
                "metadata": full_metadata,
                "graph_processed": self.graph_support,
                "vector_processed": self.vector_support,
                "timestamp": full_metadata["timestamp"]
            }
            
        except Exception as e:
            self.errors_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {str(e)}")
    
    async def search_memory(
        self,
        query: str,
        user_id: str = "user",
        limit: int = 5,
        agent_id: Optional[str] = None,
        session_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Graph + Vector
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            agent_id: ID –∞–≥–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            session_id: ID —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        """
        try:
            if not self.memory:
                raise RuntimeError("Memory client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–∏—Å–∫ –≤ Mem0 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç graph + vector)
            results = await asyncio.to_thread(
                self.memory.search,
                query,
                user_id=user_id,
                limit=limit
            )
            
            self.operations_count += 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            formatted_results = []
            for result in results:
                formatted_results.append({
                    "id": result.get("id"),
                    "memory": result.get("memory"),
                    "score": result.get("score", 0.0),
                    "metadata": result.get("metadata", {}),
                    "created_at": result.get("created_at"),
                    "updated_at": result.get("updated_at")
                })
            
            logger.info(f"üîç –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(formatted_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è '{query[:50]}...'")
            
            return {
                "query": query,
                "user_id": user_id,
                "memories": formatted_results,
                "total_found": len(formatted_results),
                "search_type": "hybrid" if self.graph_support and self.vector_support else "vector",
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            self.errors_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
    
    async def list_memory(
        self,
        user_id: str = "user",
        limit: int = 50,
        agent_id: Optional[str] = None,
        session_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            agent_id: ID –∞–≥–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            session_id: ID —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        """
        try:
            if not self.memory:
                raise RuntimeError("Memory client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            results = await asyncio.to_thread(
                self.memory.get_all,
                user_id=user_id
            )
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if len(results) > limit:
                results = results[:limit]
            
            self.operations_count += 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            formatted_memories = []
            for result in results:
                formatted_memories.append({
                    "id": result.get("id"),
                    "memory": result.get("memory"),
                    "metadata": result.get("metadata", {}),
                    "created_at": result.get("created_at"),
                    "updated_at": result.get("updated_at")
                })
            
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫: {len(formatted_memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è {user_id}")
            
            return {
                "user_id": user_id,
                "memories": formatted_memories,
                "total_count": len(formatted_memories),
                "limit_applied": limit,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            self.errors_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)}")
    
    async def update_memory(
        self,
        memory_id: str,
        content: str,
        user_id: str = "user",
        metadata: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–º—è—Ç–∏
        
        Args:
            memory_id: ID –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            content: –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            metadata: –ù–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            if not self.memory:
                raise RuntimeError("Memory client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Mem0
            result = await asyncio.to_thread(
                self.memory.update,
                memory_id=memory_id,
                data=content,
                metadata=metadata
            )
            
            self.operations_count += 1
            
            logger.info(f"‚úÖ –ü–∞–º—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {memory_id}")
            
            return {
                "id": memory_id,
                "message": result.get("message", "Memory updated successfully"),
                "user_id": user_id,
                "new_content": content,
                "metadata": metadata,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            self.errors_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {str(e)}")
    
    async def delete_memory(
        self,
        memory_id: Optional[str] = None,
        user_id: Optional[str] = None,
        delete_all: bool = False
    ) -> Dict[str, Any]:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        
        Args:
            memory_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π)
            delete_all: –§–ª–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —É–¥–∞–ª–µ–Ω–∏—è
        """
        try:
            if not self.memory:
                raise RuntimeError("Memory client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if delete_all and user_id:
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await asyncio.to_thread(
                    self.memory.delete_all,
                    user_id=user_id
                )
                
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
                
                return {
                    "action": "delete_all",
                    "user_id": user_id,
                    "message": result.get("message", "All memories deleted successfully"),
                    "timestamp": datetime.now().isoformat()
                }
                
            elif memory_id:
                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏
                result = await asyncio.to_thread(
                    self.memory.delete,
                    memory_id=memory_id
                )
                
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–º—è—Ç—å: {memory_id}")
                
                return {
                    "action": "delete_single",
                    "memory_id": memory_id,
                    "message": result.get("message", "Memory deleted successfully"),
                    "timestamp": datetime.now().isoformat()
                }
            
            else:
                raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å memory_id –∏–ª–∏ user_id —Å delete_all=True")
            
            self.operations_count += 1
            
        except Exception as e:
            self.errors_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {str(e)}")
    
    async def get_memory_history(
        self,
        memory_id: str
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞–º—è—Ç–∏
        
        Args:
            memory_id: ID –ø–∞–º—è—Ç–∏
            
        Returns:
            Dict —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–∞–º—è—Ç–∏
        """
        try:
            if not self.memory:
                raise RuntimeError("Memory client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ Mem0
            history = await asyncio.to_thread(
                self.memory.history,
                memory_id=memory_id
            )
            
            self.operations_count += 1
            
            logger.info(f"üìú –ò—Å—Ç–æ—Ä–∏—è –ø–∞–º—è—Ç–∏ {memory_id}: {len(history)} –∑–∞–ø–∏—Å–µ–π")
            
            return {
                "memory_id": memory_id,
                "history": history,
                "history_count": len(history),
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            self.errors_count += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
    
    async def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Memory Client
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        try:
            health_status = {
                "status": "healthy",
                "memory_client": {
                    "initialized": self.memory is not None,
                    "graph_support": self.graph_support,
                    "vector_support": self.vector_support,
                    "redis_support": self.redis_support
                },
                "metrics": {
                    "operations_count": self.operations_count,
                    "errors_count": self.errors_count,
                    "cache_hits": self.cache_hits,
                    "cache_misses": self.cache_misses,
                    "error_rate": self.errors_count / max(self.operations_count, 1)
                },
                "capabilities": {
                    "add_memory": self.memory is not None,
                    "search_memory": self.memory is not None,
                    "graph_operations": self.graph_support,
                    "vector_operations": self.vector_support,
                    "hybrid_search": self.graph_support and self.vector_support
                },
                "timestamp": datetime.now().isoformat()
            }
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            if not self.memory:
                health_status["status"] = "unhealthy"
            elif self.errors_count / max(self.operations_count, 1) > 0.1:  # > 10% –æ—à–∏–±–æ–∫
                health_status["status"] = "degraded"
            elif not (self.graph_support or self.vector_support):
                health_status["status"] = "partial"
            
            return health_status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
            return {
                "status": "unhealthy",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
    
    async def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        return {
            "client_version": "2.0.0",
            "operations_count": self.operations_count,
            "errors_count": self.errors_count,
            "cache_hits": self.cache_hits,
            "cache_misses": self.cache_misses,
            "success_rate": (self.operations_count - self.errors_count) / max(self.operations_count, 1),
            "components": {
                "memory_initialized": self.memory is not None,
                "graph_support": self.graph_support,
                "vector_support": self.vector_support,
                "redis_support": self.redis_support
            },
            "timestamp": datetime.now().isoformat()
        }
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ cleanup"""
        try:
            # Mem0 –Ω–µ —Ç—Ä–µ–±—É–µ—Ç explicit close
            if self.memory:
                logger.info("üìù Memory client connections –∑–∞–∫—Ä—ã—Ç—ã")
            
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.memory = None
            self.graph_support = False
            self.vector_support = False
            
            logger.info("üîí EnterpriseMemoryClient –∑–∞–∫—Ä—ã—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")


# =================== FACTORY –§–£–ù–ö–¶–ò–ò ===================

async def create_enterprise_memory_client() -> EnterpriseMemoryClient:
    """Factory —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    client = EnterpriseMemoryClient()
    await client.initialize()
    return client


def get_memory_client_sync() -> EnterpriseMemoryClient:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è compatibility"""
    return EnterpriseMemoryClient()


# =================== SINGLETON PATTERN ===================

_global_memory_client: Optional[EnterpriseMemoryClient] = None


async def get_global_memory_client() -> EnterpriseMemoryClient:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ (singleton)"""
    global _global_memory_client
    
    if _global_memory_client is None:
        _global_memory_client = await create_enterprise_memory_client()
    
    return _global_memory_client


async def close_global_memory_client() -> None:
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    global _global_memory_client
    
    if _global_memory_client:
        await _global_memory_client.close()
        _global_memory_client = None


# =================== UTILITIES ===================

def validate_memory_config() -> Dict[str, bool]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    required_vars = [
        "OPENAI_API_KEY",
        "DATABASE_URL",
        "NEO4J_URL"
    ]
    
    validation_result = {}
    for var in required_vars:
        validation_result[var] = os.getenv(var) is not None
    
    return validation_result


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    async def test_client():
        try:
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EnterpriseMemoryClient...")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_status = validate_memory_config()
            logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_status}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            client = await create_enterprise_memory_client()
            
            # Health check
            health = await client.health_check()
            logger.info(f"üè• Health: {health['status']}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = await client.get_stats()
            logger.info(f"üìä Stats: {stats}")
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ
            await client.close()
            
            logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_client()) 