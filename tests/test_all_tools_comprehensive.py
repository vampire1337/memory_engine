#!/usr/bin/env python3
"""
Comprehensive Test Suite –¥–ª—è –≤—Å–µ—Ö 15 MCP Memory Tools
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
"""

import asyncio
import json
import requests
import time
from datetime import datetime
from typing import Dict, Any, List
import os
from dataclasses import dataclass

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8051"
TEST_USER_ID = "heist1337"
TEST_PROJECT_ID = "mcp-mem0-prod"

@dataclass
class TestResult:
    tool_name: str
    endpoint: str
    success: bool
    response_data: Any
    execution_time: float
    error_message: str = None

class ComprehensiveMemoryTester:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.results: List[TestResult] = []
        self.session = requests.Session()
        self.session.headers.update({
            "Content-Type": "application/json",
            "Accept": "application/json"
        })
    
    def log_result(self, result: TestResult):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ" if result.success else "‚ùå"
        print(f"{status} {result.tool_name}: {result.execution_time:.2f}s")
        if not result.success and result.error_message:
            print(f"   Error: {result.error_message}")
        self.results.append(result)
    
    def test_get_endpoint(self, tool_name: str, endpoint: str) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å GET endpoint"""
        start_time = time.time()
        
        try:
            response = self.session.get(f"{BASE_URL}{endpoint}", timeout=30)
            execution_time = time.time() - start_time
            
            if response.status_code == 200:
                return TestResult(
                    tool_name=tool_name,
                    endpoint=endpoint,
                    success=True,
                    response_data=response.json(),
                    execution_time=execution_time
                )
            else:
                return TestResult(
                    tool_name=tool_name,
                    endpoint=endpoint,
                    success=False,
                    response_data=response.text,
                    execution_time=execution_time,
                    error_message=f"HTTP {response.status_code}: {response.text[:200]}"
                )
        
        except Exception as e:
            execution_time = time.time() - start_time
            return TestResult(
                tool_name=tool_name,
                endpoint=endpoint,
                success=False,
                response_data=None,
                execution_time=execution_time,
                error_message=str(e)
            )
    
    def test_endpoint(self, tool_name: str, endpoint: str, payload: Dict[str, Any]) -> TestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω endpoint"""
        start_time = time.time()
        
        try:
            response = self.session.post(f"{BASE_URL}{endpoint}", json=payload, timeout=30)
            execution_time = time.time() - start_time
            
            if response.status_code == 200:
                return TestResult(
                    tool_name=tool_name,
                    endpoint=endpoint,
                    success=True,
                    response_data=response.json(),
                    execution_time=execution_time
                )
            else:
                return TestResult(
                    tool_name=tool_name,
                    endpoint=endpoint,
                    success=False,
                    response_data=response.text,
                    execution_time=execution_time,
                    error_message=f"HTTP {response.status_code}: {response.text[:200]}"
                )
        
        except Exception as e:
            execution_time = time.time() - start_time
            return TestResult(
                tool_name=tool_name,
                endpoint=endpoint,
                success=False,
                response_data=None,
                execution_time=execution_time,
                error_message=str(e)
            )
    
    async def test_all_tools(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ 15 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–∞–º—è—Ç–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 15 MCP Memory Tools")
        print("=" * 70)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        print("\nüìä –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–í–ï–†–ö–ò")
        health_result = self.test_get_endpoint(
            "Health Check", 
            "/health"
        )
        self.log_result(health_result)
        
        graph_status_result = self.test_get_endpoint(
            "Graph Status",
            "/graph/status"
        )
        self.log_result(graph_status_result)
        
        # 2. –ë–ê–ó–û–í–´–ï 11 –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
        print("\nüíæ –ë–ê–ó–û–í–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ü–ê–ú–Ø–¢–ò (11)")
        
        # Tool 1: Save Memory
        save_result = self.test_endpoint(
            "Save Memory",
            "/memory/save",
            {
                "content": "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º mcp-mem0, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç Mem0 SDK —Å MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è enterprise-grade —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –¥–ª—è AI –∞–≥–µ–Ω—Ç–æ–≤",
                "user_id": TEST_USER_ID,
                "metadata": {
                    "project": TEST_PROJECT_ID,
                    "category": "project_info",
                    "importance": 9
                }
            }
        )
        self.log_result(save_result)
        
        # Tool 2: Search Memories 
        search_result = self.test_endpoint(
            "Search Memories",
            "/memory/search", 
            {
                "query": "mcp-mem0 –ø—Ä–æ–µ–∫—Ç",
                "user_id": TEST_USER_ID,
                "limit": 5
            }
        )
        self.log_result(search_result)
        
        # Tool 3: Get All Memories
        get_all_result = self.test_endpoint(
            "Get All Memories",
            "/memory/get-all",
            {
                "user_id": TEST_USER_ID
            }
        )
        self.log_result(get_all_result)
        
        # Tool 4: Save Verified Memory
        verified_result = self.test_endpoint(
            "Save Verified Memory",
            "/memory/save-verified",
            {
                "content": "MCP-Mem0 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 15 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: 11 –±–∞–∑–æ–≤—ã—Ö + 4 –≥—Ä–∞—Ñ–æ–≤—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç FastAPI + Mem0 SDK + Neo4j –¥–ª—è –≥—Ä–∞—Ñ–æ–≤.",
                "confidence": 0.95,
                "source": "technical_documentation",
                "user_id": TEST_USER_ID,
                "metadata": {
                    "verified_by": "developer",
                    "project": TEST_PROJECT_ID
                }
            }
        )
        self.log_result(verified_result)
        
        # Tool 5: Get Accurate Context
        context_result = self.test_endpoint(
            "Get Accurate Context",
            "/memory/get-context",
            {
                "query": "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ mcp-mem0",
                "user_id": TEST_USER_ID,
                "limit": 3
            }
        )
        self.log_result(context_result)
        
        # Tool 6: Validate Project Context
        validate_result = self.test_endpoint(
            "Validate Project Context",
            "/memory/validate-project-context",
            {
                "query": TEST_PROJECT_ID,
                "user_id": TEST_USER_ID
            }
        )
        self.log_result(validate_result)
        
        # Tool 7: Resolve Context Conflict
        conflict_result = self.test_endpoint(
            "Resolve Context Conflict",
            "/memory/resolve-conflict",
            {
                "query": "–∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π API",
                "user_id": TEST_USER_ID
            }
        )
        self.log_result(conflict_result)
        
        # Tool 8: Audit Memory Quality
        audit_result = self.test_endpoint(
            "Audit Memory Quality",
            "/memory/audit-quality",
            {
                "user_id": TEST_USER_ID
            }
        )
        self.log_result(audit_result)
        
        # Tool 9: Save Project Milestone
        milestone_result = self.test_endpoint(
            "Save Project Milestone",
            "/memory/save-milestone",
            {
                "milestone_name": "Production Ready Release",
                "description": "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ production ready —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å 15 —Ä–∞–±–æ—á–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏, –ø–æ–ª–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏ comprehensive —Ç–µ—Å—Ç–∞–º–∏",
                "project_id": TEST_PROJECT_ID,
                "user_id": TEST_USER_ID,
                "metadata": {
                    "version": "1.0.0",
                    "completion_date": datetime.now().isoformat()
                }
            }
        )
        self.log_result(milestone_result)
        
        # Tool 10: Get Current Project State
        project_state_result = self.test_endpoint(
            "Get Current Project State",
            "/memory/get-project-state",
            {
                "query": TEST_PROJECT_ID,
                "user_id": TEST_USER_ID
            }
        )
        self.log_result(project_state_result)
        
        # Tool 11: Track Project Evolution
        evolution_result = self.test_endpoint(
            "Track Project Evolution",
            "/memory/track-evolution",
            {
                "query": TEST_PROJECT_ID,
                "user_id": TEST_USER_ID
            }
        )
        self.log_result(evolution_result)
        
        # 3. –ì–†–ê–§–û–í–´–ï 4 –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê
        print("\nüï∏Ô∏è –ì–†–ê–§–û–í–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ü–ê–ú–Ø–¢–ò (4)")
        
        # Tool 12: Save Graph Memory
        graph_save_result = self.test_endpoint(
            "Save Graph Memory",
            "/graph/save-memory",
            {
                "content": "FastAPI —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Neo4j –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Mem0 SDK –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–æ–≤—ã—Ö —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –≤ –ø–∞–º—è—Ç–∏ AI –∞–≥–µ–Ω—Ç–æ–≤",
                "user_id": TEST_USER_ID,
                "metadata": {
                    "entity_type": "technical_architecture",
                    "relationships": ["FastAPI", "Neo4j", "Mem0", "AI_Agent"]
                }
            }
        )
        self.log_result(graph_save_result)
        
        # Tool 13: Search Graph Memory
        graph_search_result = self.test_endpoint(
            "Search Graph Memory",
            "/graph/search",
            {
                "query": "FastAPI Neo4j —Å–≤—è–∑–∏",
                "user_id": TEST_USER_ID,
                "limit": 5
            }
        )
        self.log_result(graph_search_result)
        
        # Tool 14: Get Entity Relationships
        entity_result = self.test_endpoint(
            "Get Entity Relationships",
            "/graph/entity-relationships",
            {
                "entity_name": "FastAPI",
                "user_id": TEST_USER_ID
            }
        )
        self.log_result(entity_result)
        
        # Tool 15: Graph Status (—É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤—ã—à–µ)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        await self.generate_comprehensive_report()
    
    async def generate_comprehensive_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å comprehensive –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "=" * 70)
        print("üìã COMPREHENSIVE TEST REPORT")
        print("=" * 70)
        
        total_tools = len(self.results)
        successful_tools = sum(1 for r in self.results if r.success)
        failed_tools = total_tools - successful_tools
        
        print(f"üéØ –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {total_tools}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful_tools}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_tools}")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tools/total_tools)*100:.1f}%")
        
        avg_time = sum(r.execution_time for r in self.results) / len(self.results)
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_time:.2f}s")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print(f"\nüìà –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        
        basic_tools = [r for r in self.results if "graph" not in r.endpoint.lower()]
        graph_tools = [r for r in self.results if "graph" in r.endpoint.lower()]
        
        basic_success = sum(1 for r in basic_tools if r.success)
        graph_success = sum(1 for r in graph_tools if r.success)
        
        print(f"üíæ –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {basic_success}/{len(basic_tools)} —É—Å–ø–µ—à–Ω–æ")
        print(f"üï∏Ô∏è –ì—Ä–∞—Ñ–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {graph_success}/{len(graph_tools)} —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_data = {
            "test_timestamp": datetime.now().isoformat(),
            "total_tools": total_tools,
            "successful_tools": successful_tools,
            "failed_tools": failed_tools,
            "success_rate": (successful_tools/total_tools)*100,
            "average_execution_time": avg_time,
            "detailed_results": [
                {
                    "tool_name": r.tool_name,
                    "endpoint": r.endpoint,
                    "success": r.success,
                    "execution_time": r.execution_time,
                    "error_message": r.error_message
                }
                for r in self.results
            ]
        }
        
        os.makedirs("test_reports", exist_ok=True)
        report_file = f"test_reports/comprehensive_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        if failed_tools > 0:
            print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
            for r in self.results:
                if not r.success:
                    print(f"   ‚ùå {r.tool_name}: {r.error_message}")
        
        print("\nüéâ Comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        return report_data

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ MCP-Mem0 Comprehensive Test Suite")
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ 15 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–∞–º—è—Ç–∏...")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=10)
        if response.status_code != 200:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {BASE_URL}")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ unified_memory_server.py –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
            return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ unified_memory_server.py –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tester = ComprehensiveMemoryTester()
    await tester.test_all_tools()

if __name__ == "__main__":
    asyncio.run(main()) 