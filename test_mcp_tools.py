#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Enhanced Memory System
"""
import os
import sys
import asyncio
import json
from datetime import datetime

# Add src to path
sys.path.insert(0, 'src')

# Mock Mem0 client –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockMem0Client:
    def __init__(self):
        self.memories = []
        
    def add(self, content, metadata=None):
        memory = {
            "id": f"test_{len(self.memories)}",
            "content": content,
            "metadata": metadata or {},
            "created_at": datetime.now().isoformat()
        }
        self.memories.append(memory)
        return {"message": f"Memory added with ID {memory['id']}"}
    
    def search(self, query, limit=10):
        # Simple mock search
        return [mem for mem in self.memories if query.lower() in mem['content'].lower()][:limit]
    
    def get_all(self):
        return self.memories

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
os.environ["MEM0_CONFIG_TYPE"] = "sqlite"
os.environ["MEM0_SQLITE_PATH"] = "./test_memory.db"
os.environ["DEBUG"] = "true"

async def test_all_tools():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ"""
    
    print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ñ–î–û–ì–û MCP –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê")
    print("=" * 60)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    try:
        from main import (
            save_verified_memory, get_accurate_context, validate_project_context,
            resolve_context_conflict, audit_memory_quality, save_project_milestone,
            get_current_project_state, track_project_evolution
        )
        print("‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    class MockContext:
        def __init__(self):
            self.mem0_client = MockMem0Client()
    
    ctx = MockContext()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    project_id = "test_project_enhanced_memory"
    
    print("\n1Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú save_verified_memory")
    try:
        result = await save_verified_memory(
            ctx,
            content="–¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è Enhanced Memory System",
            project_id=project_id,
            category="architecture",
            confidence_level=9,
            source="code_analysis",
            tags="enhanced_memory,architecture,mcp"
        )
        print("‚úÖ save_verified_memory —Ä–∞–±–æ—Ç–∞–µ—Ç:", result)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ save_verified_memory:", e)
    
    print("\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú get_accurate_context")
    try:
        result = await get_accurate_context(
            ctx,
            query="Enhanced Memory System –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
            project_id=project_id,
            min_confidence=7
        )
        print("‚úÖ get_accurate_context —Ä–∞–±–æ—Ç–∞–µ—Ç:", len(result))
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ get_accurate_context:", e)
    
    print("\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú validate_project_context")
    try:
        result = await validate_project_context(ctx, project_id=project_id)
        print("‚úÖ validate_project_context —Ä–∞–±–æ—Ç–∞–µ—Ç:", result)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ validate_project_context:", e)
    
    print("\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú save_project_milestone")
    try:
        result = await save_project_milestone(
            ctx,
            project_id=project_id,
            milestone_type="architecture_decision",
            content="–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ Enhanced Memory —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            impact_level=10,
            tags="milestone,architecture,production"
        )
        print("‚úÖ save_project_milestone —Ä–∞–±–æ—Ç–∞–µ—Ç:", result)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ save_project_milestone:", e)
    
    print("\n5Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú get_current_project_state")
    try:
        result = await get_current_project_state(ctx, project_id=project_id)
        print("‚úÖ get_current_project_state —Ä–∞–±–æ—Ç–∞–µ—Ç:", result)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ get_current_project_state:", e)
    
    print("\n6Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú track_project_evolution")
    try:
        result = await track_project_evolution(ctx, project_id=project_id)
        print("‚úÖ track_project_evolution —Ä–∞–±–æ—Ç–∞–µ—Ç:", result)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ track_project_evolution:", e)
    
    print("\n7Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú audit_memory_quality")
    try:
        result = await audit_memory_quality(ctx, project_id=project_id)
        print("‚úÖ audit_memory_quality —Ä–∞–±–æ—Ç–∞–µ—Ç:", result)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ audit_memory_quality:", e)
    
    print("\n8Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú resolve_context_conflict")
    try:
        result = await resolve_context_conflict(
            ctx,
            conflicting_memory_ids="test_0,test_1",
            correct_content="–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            resolution_reason="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"
        )
        print("‚úÖ resolve_context_conflict —Ä–∞–±–æ—Ç–∞–µ—Ç:", result)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ resolve_context_conflict:", e)
    
    print("\n" + "=" * 60)
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å")
    
    return True

if __name__ == "__main__":
    asyncio.run(test_all_tools()) 