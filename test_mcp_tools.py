#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ 15 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ HTTP API
"""

import asyncio
import aiohttp
import json
from datetime import datetime

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TOOLS_TO_TEST = [
    # –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (11)
    {"endpoint": "/memory/save", "method": "POST", "data": {"content": "–¢–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞", "user_id": "test_user"}},
    {"endpoint": "/memory/search", "method": "POST", "data": {"query": "—Ç–µ—Å—Ç", "user_id": "test_user"}},
    {"endpoint": "/memory/get-all", "method": "POST", "data": {"user_id": "test_user"}},
    {"endpoint": "/memory/save-verified", "method": "POST", "data": {"content": "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "user_id": "test_user"}},
    {"endpoint": "/memory/get-context", "method": "POST", "data": {"query": "–∫–æ–Ω—Ç–µ–∫—Å—Ç", "user_id": "test_user"}},
    {"endpoint": "/memory/validate-project-context", "method": "POST", "data": {"query": "–ø—Ä–æ–µ–∫—Ç", "user_id": "test_user"}},
    {"endpoint": "/memory/resolve-conflict", "method": "POST", "data": {"query": "–∫–æ–Ω—Ñ–ª–∏–∫—Ç", "user_id": "test_user"}},
    {"endpoint": "/memory/audit-quality", "method": "POST", "data": {"user_id": "test_user"}},
    {"endpoint": "/memory/save-milestone", "method": "POST", "data": {"milestone_name": "–¢–µ—Å—Ç", "description": "–¢–µ—Å—Ç–æ–≤—ã–π milestone", "project_id": "test_project", "user_id": "test_user"}},
    {"endpoint": "/memory/get-project-state", "method": "POST", "data": {"query": "—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "user_id": "test_user"}},
    {"endpoint": "/memory/track-evolution", "method": "POST", "data": {"query": "—ç–≤–æ–ª—é—Ü–∏—è", "user_id": "test_user"}},
    
    # –ì—Ä–∞—Ñ–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (4)
    {"endpoint": "/graph/save-memory", "method": "POST", "data": {"content": "–ì—Ä–∞—Ñ —Ç–µ—Å—Ç", "user_id": "test_user"}},
    {"endpoint": "/graph/search", "method": "POST", "data": {"query": "–≥—Ä–∞—Ñ", "user_id": "test_user"}},
    {"endpoint": "/graph/entity-relationships", "method": "POST", "data": {"entity_name": "Python", "user_id": "test_user"}},
    {"endpoint": "/graph/status", "method": "GET", "data": None}
]

async def test_tool(session, tool):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
    url = f"http://localhost:8051{tool['endpoint']}"
    
    try:
        if tool['method'] == 'GET':
            async with session.get(url) as response:
                result = await response.json()
                return {
                    "endpoint": tool['endpoint'],
                    "status": "‚úÖ SUCCESS" if response.status == 200 else f"‚ùå ERROR {response.status}",
                    "response_code": response.status,
                    "result": result
                }
        else:
            async with session.post(url, json=tool['data']) as response:
                result = await response.json()
                return {
                    "endpoint": tool['endpoint'],
                    "status": "‚úÖ SUCCESS" if response.status == 200 else f"‚ùå ERROR {response.status}",
                    "response_code": response.status,
                    "result": result
                }
    except Exception as e:
        return {
            "endpoint": tool['endpoint'],
            "status": f"‚ùå EXCEPTION: {str(e)}",
            "response_code": 0,
            "result": None
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MCP –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("=" * 50)
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîß –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(TOOLS_TO_TEST)}")
    print("=" * 50)
    
    results = []
    success_count = 0
    
    async with aiohttp.ClientSession() as session:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [test_tool(session, tool) for tool in TOOLS_TO_TEST]
        results = await asyncio.gather(*tasks)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for result in results:
        print(f"{result['status']:<15} {result['endpoint']}")
        if result['response_code'] == 200:
            success_count += 1
    
    print("=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{len(TOOLS_TO_TEST)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/len(TOOLS_TO_TEST)*100):.1f}%")
    
    if success_count == len(TOOLS_TO_TEST):
        print("üéâ –í–°–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢! MCP –°–ï–†–í–ï–† –ì–û–¢–û–í –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    return success_count == len(TOOLS_TO_TEST)

if __name__ == "__main__":
    asyncio.run(main()) 