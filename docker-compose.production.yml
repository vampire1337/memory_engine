version: '3.8'

# üèóÔ∏è ENTERPRISE MCP-MEM0 PRODUCTION DEPLOYMENT
# FastAPI-MCP + Mem0 Graph+Vector + Redis + Monitoring

services:
  # ========================= MAIN APPLICATION =========================
  mcp-mem0-server:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: mcp-mem0-enterprise
    ports:
      - "8000:8000"  # FastAPI server
    environment:
      # Application
      - APP_ENV=production
      - APP_VERSION=2.0.0
      - LOG_LEVEL=INFO
      
      # Database - –ö–†–ò–¢–ò–ß–ù–û: Session Pooler (5432) –≤–º–µ—Å—Ç–æ Transaction (6543)
      - DATABASE_URL=postgresql://postgres.zimkublwzjmyxtjnioet:fnucErDpKQRWy2TU@aws-0-eu-north-1.pooler.supabase.com:5432/postgres
      
      # Graph Database (Memgraph)
      - NEO4J_URL=bolt://memgraph:7687
      - NEO4J_USERNAME=
      - NEO4J_PASSWORD=
      
      # Redis 
      - REDIS_URL=redis://redis:6379/0
      - REDIS_PASSWORD=
      
      # OpenAI API
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
    depends_on:
      memgraph:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mcp-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================= GRAPH DATABASE =========================
  memgraph:
    image: memgraph/memgraph:2.15.1
    container_name: mcp-memgraph
    ports:
      - "7687:7687"  # Bolt protocol
      - "7444:7444"  # HTTP –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    environment:
      - MEMGRAPH_LOG_LEVEL=INFO
    volumes:
      - memgraph-data:/var/lib/memgraph
      - memgraph-logs:/var/log/memgraph
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:7444/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================= REDIS CACHE =========================
  redis:
    image: redis:7.2-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================= MONITORING =========================
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mcp-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.1.0
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mcp-network
    restart: unless-stopped

# ========================= NETWORKING =========================
networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

# ========================= PERSISTENT STORAGE =========================
volumes:
  memgraph-data:
    driver: local
  memgraph-logs:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local 