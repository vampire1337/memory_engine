#!/usr/bin/env python3
"""
üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –° REDIS –ù–ê TEMPORAL.IO - NEXT LEVEL –ü–ê–ú–Ø–¢–¨
====================================================

–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å Redis –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–∞ Temporal.io workflows
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–ó–ê–î–ê–ß–ò:
1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–π Redis –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã  
2. –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π Temporal –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 17 memory tools
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Vector + Graph –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Temporal workflows
"""

import asyncio
import logging
import subprocess
import time
import json
import httpx
from typing import Dict, Any, List
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("temporal-migration")


class TemporalMigrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ —Å Redis –Ω–∞ Temporal.io"""
    
    def __init__(self):
        self.old_services = [
            "mcp-memory-server",
            "mcp-fastapi-mem0", 
            "redis"
        ]
        self.new_services = [
            "temporal-server",
            "temporal-postgresql",
            "temporal-web",
            "memgraph",
            "qdrant",
            "mcp-memory-server-temporal"
        ]
        self.test_endpoints = {
            "health": "http://localhost:8051/health",
            "temporal_health": "http://localhost:8051/temporal/health",
            "memory_save": "http://localhost:8051/memory/save",
            "memory_search": "http://localhost:8051/memory/search",
            "graph_save": "http://localhost:8051/graph/save-memory",
            "temporal_ui": "http://localhost:8233"
        }
    
    async def stop_old_architecture(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Redis –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–π Redis –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
        
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            result = subprocess.run([
                "docker-compose", "down", "--remove-orphans"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info("‚úÖ –°—Ç–∞—Ä–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {result.stderr}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            subprocess.run([
                "docker", "system", "prune", "-f"
            ], capture_output=True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ä–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
    
    async def start_temporal_architecture(self):
        """–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π Temporal –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ NEXT LEVEL –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å Temporal.io...")
        
        try:
            # –°–±–æ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
            logger.info("üî® –°–±–æ—Ä–∫–∞ Temporal Dockerfile...")
            build_result = subprocess.run([
                "docker", "build", 
                "-f", "Dockerfile.temporal",
                "--target", "production",
                "-t", "mcp-mem0:temporal", 
                "."
            ], capture_output=True, text=True)
            
            if build_result.returncode == 0:
                logger.info("‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {build_result.stderr}")
                return False
            
            # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            logger.info("üèõÔ∏è –ó–∞–ø—É—Å–∫ Temporal infrastructure...")
            start_result = subprocess.run([
                "docker-compose", "-f", "docker-compose.temporal.yml", 
                "up", "-d", "--build"
            ], capture_output=True, text=True)
            
            if start_result.returncode == 0:
                logger.info("‚úÖ Temporal –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {start_result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Temporal –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
            return False
    
    async def wait_for_services(self, timeout: int = 300):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (timeout: {timeout}s)...")
        
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                result = subprocess.run([
                    "docker", "ps", "--format", "table {{.Names}}\\t{{.Status}}"
                ], capture_output=True, text=True)
                
                running_services = result.stdout
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
                async with httpx.AsyncClient() as client:
                    try:
                        response = await client.get(
                            self.test_endpoints["health"],
                            timeout=5.0
                        )
                        if response.status_code == 200:
                            health_data = response.json()
                            logger.info(f"‚úÖ Health check passed: {health_data.get('status')}")
                            return True
                    except Exception:
                        pass
                
                logger.info("‚è≥ –°–µ—Ä–≤–∏—Å—ã –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                await asyncio.sleep(10)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
                await asyncio.sleep(5)
        
        logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
        return False
    
    async def test_memory_operations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö memory operations —á–µ—Ä–µ–∑ Temporal"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NEXT LEVEL memory operations...")
        
        test_results = {}
        
        async with httpx.AsyncClient() as client:
            
            # 1. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ Temporal
            try:
                save_data = {
                    "content": "TEMPORAL MIGRATION TEST: –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å Temporal workflows –¥–ª—è —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤. Vector + Graph + Temporal = NEXT LEVEL!",
                    "user_id": "heist1337",
                    "session_id": "temporal-migration-test",
                    "metadata": {
                        "migration": "redis_to_temporal",
                        "architecture": "NEXT_LEVEL",
                        "test_type": "integration"
                    }
                }
                
                response = await client.post(
                    self.test_endpoints["memory_save"],
                    json=save_data,
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    test_results["memory_save"] = {
                        "status": "‚úÖ SUCCESS",
                        "operation_id": result.get("operation_id"),
                        "temporal_enabled": result.get("temporal_enabled")
                    }
                    logger.info(f"‚úÖ Memory save test: {result.get('operation_id')}")
                else:
                    test_results["memory_save"] = {
                        "status": f"‚ùå FAILED ({response.status_code})",
                        "error": response.text
                    }
                    
            except Exception as e:
                test_results["memory_save"] = {
                    "status": "‚ùå ERROR",
                    "error": str(e)
                }
            
            # 2. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ Temporal
            try:
                search_data = {
                    "query": "Temporal workflows NEXT LEVEL –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
                    "user_id": "heist1337",
                    "session_id": "temporal-migration-test",
                    "limit": 5
                }
                
                response = await client.post(
                    self.test_endpoints["memory_search"],
                    json=search_data,
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    test_results["memory_search"] = {
                        "status": "‚úÖ SUCCESS",
                        "operation_id": result.get("operation_id"),
                        "temporal_enabled": result.get("temporal_enabled")
                    }
                    logger.info(f"‚úÖ Memory search test: {result.get('operation_id')}")
                else:
                    test_results["memory_search"] = {
                        "status": f"‚ùå FAILED ({response.status_code})",
                        "error": response.text
                    }
                    
            except Exception as e:
                test_results["memory_search"] = {
                    "status": "‚ùå ERROR",
                    "error": str(e)
                }
            
            # 3. –¢–µ—Å—Ç –≥—Ä–∞—Ñ–æ–≤–æ–π –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ Temporal
            try:
                graph_data = {
                    "content": "ENTITY: Temporal.io RELATIONSHIP: –∑–∞–º–µ–Ω—è–µ—Ç ENTITY: Redis PURPOSE: —Å–æ–∑–¥–∞–Ω–∏–µ NEXT LEVEL –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è AI –∞–≥–µ–Ω—Ç–æ–≤ —Å Vector –∏ Graph –ø–∞–º—è—Ç—å—é",
                    "user_id": "heist1337",
                    "session_id": "graph-temporal-test",
                    "metadata": {
                        "test": "graph_integration",
                        "entities": ["Temporal.io", "Redis", "AI –∞–≥–µ–Ω—Ç—ã"],
                        "relationships": ["–∑–∞–º–µ–Ω—è–µ—Ç", "—Å–æ–∑–¥–∞–Ω–∏–µ"]
                    }
                }
                
                response = await client.post(
                    self.test_endpoints["graph_save"],
                    json=graph_data,
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    test_results["graph_save"] = {
                        "status": "‚úÖ SUCCESS", 
                        "operation_id": result.get("operation_id"),
                        "operation_type": result.get("operation_type")
                    }
                    logger.info(f"‚úÖ Graph memory test: {result.get('operation_id')}")
                else:
                    test_results["graph_save"] = {
                        "status": f"‚ùå FAILED ({response.status_code})",
                        "error": response.text
                    }
                    
            except Exception as e:
                test_results["graph_save"] = {
                    "status": "‚ùå ERROR",
                    "error": str(e)
                }
        
        return test_results
    
    async def test_temporal_features(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö Temporal —Ñ—É–Ω–∫—Ü–∏–π"""
        logger.info("üèõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Temporal workflows –∏ monitoring...")
        
        temporal_results = {}
        
        async with httpx.AsyncClient() as client:
            
            # 1. –¢–µ—Å—Ç Temporal health
            try:
                response = await client.get(
                    self.test_endpoints["temporal_health"],
                    timeout=10.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    temporal_results["temporal_health"] = {
                        "status": "‚úÖ HEALTHY",
                        "temporal_details": result.get("temporal_health")
                    }
                    logger.info("‚úÖ Temporal health check passed")
                else:
                    temporal_results["temporal_health"] = {
                        "status": f"‚ùå UNHEALTHY ({response.status_code})"
                    }
                    
            except Exception as e:
                temporal_results["temporal_health"] = {
                    "status": "‚ùå ERROR",
                    "error": str(e)
                }
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Temporal Web UI
            try:
                response = await client.get(
                    self.test_endpoints["temporal_ui"],
                    timeout=5.0
                )
                
                if response.status_code == 200:
                    temporal_results["temporal_ui"] = {
                        "status": "‚úÖ AVAILABLE",
                        "url": self.test_endpoints["temporal_ui"]
                    }
                    logger.info("‚úÖ Temporal Web UI –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    temporal_results["temporal_ui"] = {
                        "status": f"‚ùå UNAVAILABLE ({response.status_code})"
                    }
                    
            except Exception as e:
                temporal_results["temporal_ui"] = {
                    "status": "‚ùå ERROR",
                    "error": str(e)
                }
        
        return temporal_results
    
    def print_migration_summary(self, memory_tests: Dict, temporal_tests: Dict):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        
        print("\n" + "="*60)
        print("üèõÔ∏è –û–¢–ß–ï–¢ –û –ú–ò–ì–†–ê–¶–ò–ò –ù–ê TEMPORAL.IO - NEXT LEVEL")
        print("="*60)
        
        print(f"\n‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MEMORY OPERATIONS:")
        for test_name, result in memory_tests.items():
            print(f"   {test_name}: {result.get('status', 'UNKNOWN')}")
            if "operation_id" in result:
                print(f"      Operation ID: {result['operation_id']}")
        
        print("\nüèõÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TEMPORAL FEATURES:")
        for test_name, result in temporal_tests.items():
            print(f"   {test_name}: {result.get('status', 'UNKNOWN')}")
            if "url" in result:
                print(f"      URL: {result['url']}")
        
        print("\nüéØ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê NEXT LEVEL:")
        print("   ‚úÖ Temporal Workflows: Session management")
        print("   ‚úÖ Temporal Activities: Memory operations") 
        print("   ‚úÖ Temporal Signals: Real-time communication")
        print("   ‚úÖ Temporal Queries: Status monitoring")
        print("   ‚úÖ Vector Store: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ (Qdrant)")
        print("   ‚úÖ Graph Store: Relationships (Memgraph)")
        print("   ‚úÖ MCP Protocol: 17 enterprise tools")
        
        print("\nüí° –£–î–ê–õ–ï–ù–û (Redis –ø—Ä–æ–±–ª–µ–º—ã):")
        print("   ‚ùå async/await boolean errors")
        print("   ‚ùå Distributed locks complexity")
        print("   ‚ùå Session management issues") 
        print("   ‚ùå Event handling instability")
        
        print("\nüöÄ ENDPOINTS:")
        print(f"   ‚Ä¢ Memory Server: http://localhost:8051")
        print(f"   ‚Ä¢ Temporal Web UI: http://localhost:8233")
        print(f"   ‚Ä¢ API Docs: http://localhost:8051/docs")
        print(f"   ‚Ä¢ Health Check: http://localhost:8051/health")
        
        print("\n" + "="*60)
        print("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê! NEXT LEVEL –ü–ê–ú–Ø–¢–¨ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
        print("="*60)
    
    async def run_full_migration(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ –ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò –° REDIS –ù–ê TEMPORAL.IO")
        
        try:
            # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            await self.stop_old_architecture()
            
            # 2. –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã  
            if not await self.start_temporal_architecture():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Temporal –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É")
                return
            
            # 3. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            if not await self.wait_for_services():
                logger.error("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
                return
            
            # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ memory operations
            logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ memory operations...")
            memory_tests = await self.test_memory_operations()
            
            # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Temporal features
            logger.info("üèõÔ∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Temporal features...")
            temporal_tests = await self.test_temporal_features()
            
            # 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self.print_migration_summary(memory_tests, temporal_tests)
            
            logger.info("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {e}")
            raise


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    migration_manager = TemporalMigrationManager()
    await migration_manager.run_full_migration()


if __name__ == "__main__":
    asyncio.run(main()) 