#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI-MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–∞–º—è—Ç–∏
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö 11 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ REST API
"""

import json
import time
import requests
from datetime import datetime
from typing import Dict, Any

BASE_URL = "http://localhost:8000"
TEST_PROJECT_ID = "fastapi-mcp-test"

def test_api_endpoint(method: str, endpoint: str, data: Dict[str, Any] = None) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    url = f"{BASE_URL}{endpoint}"
    
    try:
        if method.upper() == "GET":
            response = requests.get(url, timeout=10)
        elif method.upper() == "POST":
            response = requests.post(url, json=data, timeout=10)
        else:
            return {"error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}"}
        
        response.raise_for_status()
        return {
            "status": "success",
            "status_code": response.status_code,
            "data": response.json()
        }
    
    except requests.exceptions.RequestException as e:
        return {
            "status": "error",
            "error": str(e)
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FastAPI-MCP –°–ï–†–í–ï–†–ê –ü–ê–ú–Ø–¢–ò")
    print("=" * 60)
    print(f"üéØ –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {TEST_PROJECT_ID}")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –¢–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö 11 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    tests = [
        {
            "name": "1. Health Check",
            "method": "GET",
            "endpoint": "/",
            "data": None
        },
        {
            "name": "2. Save Memory",
            "method": "POST", 
            "endpoint": "/memory/save",
            "data": {
                "text": f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI-MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–∞–º—è—Ç–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ {TEST_PROJECT_ID}. –î–∞—Ç–∞: {datetime.now().isoformat()}"
            }
        },
        {
            "name": "3. Get All Memories",
            "method": "GET",
            "endpoint": "/memory/all",
            "data": None
        },
        {
            "name": "4. Search Memories",
            "method": "POST",
            "endpoint": "/memory/search", 
            "data": {
                "query": "FastAPI-MCP —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "limit": 5
            }
        },
        {
            "name": "5. Save Verified Memory",
            "method": "POST",
            "endpoint": "/memory/save-verified",
            "data": {
                "content": "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ FastAPI-MCP —Å–µ—Ä–≤–µ—Ä–∞",
                "project_id": TEST_PROJECT_ID,
                "category": "testing",
                "confidence_level": 9,
                "source": "automated_test",
                "tags": "fastapi,mcp,testing,memory"
            }
        },
        {
            "name": "6. Get Accurate Context",
            "method": "POST", 
            "endpoint": "/memory/get-accurate-context",
            "data": {
                "query": "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI",
                "project_id": TEST_PROJECT_ID,
                "min_confidence": 5,
                "limit": 3
            }
        },
        {
            "name": "7. Validate Project Context",
            "method": "POST",
            "endpoint": "/memory/validate-project-context",
            "data": {
                "project_id": TEST_PROJECT_ID
            }
        },
        {
            "name": "8. Save Project Milestone", 
            "method": "POST",
            "endpoint": "/memory/save-milestone",
            "data": {
                "project_id": TEST_PROJECT_ID,
                "milestone_type": "testing_complete",
                "content": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI-MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–∞–º—è—Ç–∏", 
                "impact_level": 8,
                "tags": "milestone,testing,completion"
            }
        },
        {
            "name": "9. Get Current Project State",
            "method": "POST",
            "endpoint": "/memory/get-project-state",
            "data": {
                "project_id": TEST_PROJECT_ID
            }
        },
        {
            "name": "10. Track Project Evolution",
            "method": "POST", 
            "endpoint": "/memory/track-evolution",
            "data": {
                "project_id": TEST_PROJECT_ID,
                "category": "testing"
            }
        },
        {
            "name": "11. Audit Memory Quality",
            "method": "POST",
            "endpoint": "/memory/audit-quality", 
            "data": {
                "project_id": TEST_PROJECT_ID
            }
        },
        {
            "name": "12. Resolve Context Conflict",
            "method": "POST",
            "endpoint": "/memory/resolve-conflict",
            "data": {
                "conflicting_memory_ids": "test-id-1,test-id-2",
                "correct_content": "FastAPI-MCP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫",
                "resolution_reason": "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
            }
        }
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    results = []
    success_count = 0
    
    for i, test in enumerate(tests, 1):
        print(f"üîÑ {test['name']}...")
        
        result = test_api_endpoint(test['method'], test['endpoint'], test['data'])
        results.append({
            "test": test['name'],
            "result": result
        })
        
        if result['status'] == 'success':
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ (–∫–æ–¥: {result['status_code']})")
            success_count += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        time.sleep(0.5)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print()
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(tests)} —Ç–µ—Å—Ç–æ–≤")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {len(tests) - success_count}/{len(tests)} —Ç–µ—Å—Ç–æ–≤")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success_count/len(tests)*100):.1f}%")
    
    if success_count == len(tests):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üöÄ FastAPI-MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
    else:
        print(f"\n‚ö†Ô∏è  {len(tests) - success_count} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MCP —ç–Ω–¥–ø–æ–∏–Ω—Ç
    print("\nüîß –ü–†–û–í–ï–†–ö–ê MCP –≠–ù–î–ü–û–ò–ù–¢–ê")
    print("-" * 30)
    mcp_result = test_api_endpoint("GET", "/mcp", None)
    if mcp_result['status'] == 'success':
        print("‚úÖ MCP —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
        print(f"üåê MCP URL: {BASE_URL}/mcp")
    else:
        print("‚ùå MCP —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print()
    print("üìù –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for result in results:
        status_emoji = "‚úÖ" if result['result']['status'] == 'success' else "‚ùå"
        print(f"  {status_emoji} {result['test']}")
    
    print()
    print("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print(f"  üìñ Swagger UI: {BASE_URL}/docs")
    print(f"  üîß MCP Server: {BASE_URL}/mcp")
    print(f"  ‚ù§Ô∏è  Health Check: {BASE_URL}/")

if __name__ == "__main__":
    main() 