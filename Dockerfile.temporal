# =================== NEXT LEVEL DOCKERFILE —Å TEMPORAL.IO ===================
# 
# üèóÔ∏è –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
# - Temporal.io workflows –¥–ª—è orchestration  
# - UV package manager –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö build'–æ–≤
# - Multi-stage –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
# - Production-ready —Å security best practices
#
# –£–ë–†–ê–ù–û: Redis dependencies –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
# –î–û–ë–ê–í–õ–ï–ù–û: Temporal.io –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

# =================== BASE STAGE ===================
FROM python:3.11-slim-bullseye AS base

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ UV –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
RUN pip install uv

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN useradd --create-home --shell /bin/bash app

# =================== BUILDER STAGE ===================
FROM base AS builder

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ requirements
COPY requirements.txt .

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ UV (–≤ 10-100x –±—ã—Å—Ç—Ä–µ–µ pip)
RUN uv pip install --system --no-cache-dir -r requirements.txt

# =================== DEVELOPMENT STAGE ===================
FROM builder AS development

# –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
WORKDIR /app

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY --chown=app:app . .

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è app
USER app

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV LOG_LEVEL=DEBUG
ENV TEMPORAL_SERVER_ADDRESS=temporal-server:7233

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# –ó–∞–ø—É—Å–∫ development —Å–µ—Ä–≤–µ—Ä–∞
CMD ["python", "-m", "uvicorn", "src.fastapi_temporal_server:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# =================== PRODUCTION STAGE ===================
FROM base AS production

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY requirements.txt .
RUN uv pip install --system --no-cache-dir -r requirements.txt

# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–¥–∞–ª–µ–Ω–∏–µ build –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get purge -y build-essential && apt-get autoremove -y

# –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
WORKDIR /app

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
COPY --chown=app:app src/ ./src/
COPY --chown=app:app pyproject.toml ./

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ª–æ–≥–æ–≤
RUN mkdir -p /app/logs && chown app:app /app/logs

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è app
USER app

# Production –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV LOG_LEVEL=INFO
ENV TEMPORAL_SERVER_ADDRESS=temporal-server:7233
ENV TEMPORAL_NAMESPACE=default
ENV TEMPORAL_TASK_QUEUE=memory-task-queue

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose –ø–æ—Ä—Ç
EXPOSE 8000

# Production –∑–∞–ø—É—Å–∫ —Å Gunicorn
CMD ["gunicorn", "src.fastapi_temporal_server:app", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000", "--timeout", "120", "--access-logfile", "-", "--error-logfile", "-"]

# =================== TEMPORAL WORKER STAGE ===================
FROM production AS temporal-worker

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Temporal Worker
ENV TEMPORAL_WORKER_ENABLED=true
ENV TEMPORAL_TASK_QUEUE=memory-task-queue

# –ó–∞–ø—É—Å–∫ Temporal Worker
CMD ["python", "-m", "src.temporal_memory_service"]

# =================== –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ó–ê–ú–ï–¢–ö–ò ===================
#
# NEXT LEVEL –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
#
# 1. UV Package Manager:
#    ‚úÖ –í 10-100x –±—ã—Å—Ç—Ä–µ–µ pip
#    ‚úÖ Better dependency resolution
#    ‚úÖ Deterministic builds
#
# 2. Multi-stage Build:
#    ‚úÖ development: –° reload –∏ debug
#    ‚úÖ production: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
#    ‚úÖ temporal-worker: Dedicated worker
#
# 3. Security:
#    ‚úÖ Non-root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
#    ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π attack surface
#    ‚úÖ No unnecessary packages
#
# 4. Temporal.io Integration:
#    ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Temporal server
#    ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è worker'–∞
#    ‚úÖ Health checks –¥–ª—è workflows
#
# 5. Production Features:
#    ‚úÖ Gunicorn –¥–ª—è production
#    ‚úÖ Proper logging configuration
#    ‚úÖ Health checks
#    ‚úÖ Resource optimization
#
# –£–î–ê–õ–ï–ù–û:
# ‚ùå Redis related packages
# ‚ùå Complex Redis configuration
# ‚ùå Manual state management code
#
# BUILD –ö–û–ú–ê–ù–î–´:
# - Development: docker build --target development -t mcp-mem0:dev .
# - Production: docker build --target production -t mcp-mem0:prod .
# - Worker: docker build --target temporal-worker -t mcp-mem0:worker . 